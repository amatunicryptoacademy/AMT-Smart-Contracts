{
  "address": "0xa7d3af854E456575115742E3B3308D134521cC2D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed_",
          "type": "address"
        },
        {
          "internalType": "contract IApePair",
          "name": "pair_",
          "type": "address"
        },
        {
          "internalType": "contract IApeRouter02",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "burnReserve_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityReserve_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestNumbers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newMaxRange",
          "type": "uint16"
        }
      ],
      "name": "UpdatedMaxRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newLotterySize",
          "type": "uint16"
        }
      ],
      "name": "UpdatedSizeOfLottery",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "alreadyClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "prizeDistributionPercents_",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "startBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "ticketsCount_",
          "type": "uint16"
        }
      ],
      "name": "createNewLotto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentTicket",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "drawWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "getBasicLottoInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lotteryID",
              "type": "uint256"
            },
            {
              "internalType": "enum Lottery.Status",
              "name": "lotteryStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint16[]",
              "name": "prizeDistributionPercents",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "ticketsCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "ticketsSold",
              "type": "uint16"
            },
            {
              "internalType": "uint16[]",
              "name": "winningNumbers",
              "type": "uint16[]"
            }
          ],
          "internalType": "struct Lottery.LottoInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "usersNumbers_",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "winningNumbers_",
          "type": "uint16[]"
        }
      ],
      "name": "getNumberOfMatching",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "wonNumbers",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "name": "getTokenAmountForCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "getUsersTickets",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getWiningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        }
      ],
      "name": "getWonAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "numbersDrawn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IApePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rendomNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IApeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "randomNumberGenerator_",
          "type": "address"
        }
      ],
      "name": "setRendomGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersTickets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x872bc3a4999824713644b90778ac9c8eeeef0f0f52e48fe7555ab54d95e57a9d",
  "receipt": {
    "to": null,
    "from": "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "contractAddress": "0xa7d3af854E456575115742E3B3308D134521cC2D",
    "transactionIndex": 2,
    "gasUsed": "2655137",
    "logsBloom": "0x
    "blockHash": "0x665670c5bd85f6839704eddb9cb13ee4960863626cede4afb6b1bc01ce66740e",
    "transactionHash": "0x872bc3a4999824713644b90778ac9c8eeeef0f0f52e48fe7555ab54d95e57a9d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 25565241,
        "transactionHash": "0x872bc3a4999824713644b90778ac9c8eeeef0f0f52e48fe7555ab54d95e57a9d",
        "address": "0xa7d3af854E456575115742E3B3308D134521cC2D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x665670c5bd85f6839704eddb9cb13ee4960863626cede4afb6b1bc01ce66740e"
      }
    ],
    "blockNumber": 25565241,
    "cumulativeGasUsed": "2761204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb2f7c9ef736Ebdb27AB37591Ed3aeBB20cbe9512",
    "0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526",
    "0xe1F65657c63a9278b614314f480CB948358FAb1b",
    "0xD99D1c33F9fC3444f8101754aBC46c52416550D1",
    "0x7B6a566D303C716dFA5Caa92b5f5e35b911C258d",
    "0x21c7F4D529eAd0a75A039aa009B07452Bcce622B",
    "0xb2444FE0E53378E094736834067c1E2653ec3CAB"
  ],
  "numDeployments": 32,
  "solcInputHash": "5ccd68c9b530f0db4870597ab52b9b38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed_\",\"type\":\"address\"},{\"internalType\":\"contract IApePair\",\"name\":\"pair_\",\"type\":\"address\"},{\"internalType\":\"contract IApeRouter02\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnReserve_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReserve_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxRange\",\"type\":\"uint16\"}],\"name\":\"UpdatedMaxRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newLotterySize\",\"type\":\"uint16\"}],\"name\":\"UpdatedSizeOfLottery\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"prizeDistributionPercents_\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount_\",\"type\":\"uint16\"}],\"name\":\"createNewLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTicket\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"drawWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"getBasicLottoInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"},{\"internalType\":\"enum Lottery.Status\",\"name\":\"lotteryStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16[]\",\"name\":\"prizeDistributionPercents\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ticketsSold\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"winningNumbers\",\"type\":\"uint16[]\"}],\"internalType\":\"struct Lottery.LottoInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"usersNumbers_\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"winningNumbers_\",\"type\":\"uint16[]\"}],\"name\":\"getNumberOfMatching\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"wonNumbers\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"getUsersTickets\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getWiningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"}],\"name\":\"getWonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"numbersDrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IApePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rendomNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomNumberGenerator_\",\"type\":\"address\"}],\"name\":\"setRendomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersTickets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewLotto(uint16[],uint256,uint256,uint16)\":{\"params\":{\"startBlock_\":\"The block number for the beginning of the          lottery.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApePair.sol\":{\"content\":\"pragma solidity >=0.6.6;\\n\\ninterface IApePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xf14024513aca76c2f6aa69aed4187ee8ca05a39a0beddc46d3723d66c386c434\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IApeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xad1c658327282f1f6af49b2574b2129115ada2b39b11668bfb23e0101e9ddab3\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IApeRouter01.sol';\\n\\ninterface IApeRouter02 is IApeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7ddd238790bfcb7411a66327801568da451239142391806bfdf6d0f663b80cbc\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n// Imported OZ helper contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// Inherited allowing for ownership of contract\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// Allows for intergration with ChainLink VRF\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\nimport \\\"ApeSwap-AMM-Periphery/contracts/interfaces/IApePair.sol\\\";\\nimport \\\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\\\";\\n\\n\\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\\n\\ncontract Lottery is Ownable {\\n    // Libraries\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n    // Address functionality\\n    using Address for address;\\n\\n    // State variables\\n    // Instance of Cake token (collateral currency for lotto)\\n    IERC20 public token;\\n    // Storing of the randomness generator\\n    IRandomNumberGenerator internal randomGenerator_;\\n    // Request ID for random number\\n    bytes32 internal requestId_;\\n    // Counter for lottery IDs\\n    uint256 private lotteryIdCounter_;\\n    AggregatorInterface public priceFeed;\\n    IApePair public pair;\\n    IApeRouter02 public router;\\n    // TODO check\\n    address private constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n    address public burnReserve;\\n    address public liquidityReserve;\\n    address public treasury;\\n\\n    mapping(uint256 => uint16) public currentTicket;\\n    mapping(address => mapping(uint256 => uint16[])) public usersTickets;\\n    mapping(address => mapping(uint256 => bool)) public alreadyClaimed;\\n\\n    // Represents the status of the lottery\\n    enum Status {\\n        NotStarted, // The lottery has not started yet\\n        Open, // The lottery is open for ticket purchases\\n        Closed, // The lottery is no longer open for ticket purchases\\n        Completed // The lottery has been closed and the numbers drawn\\n    }\\n    // All the needed info around a lottery\\n    struct LottoInfo {\\n        uint256 lotteryID; // ID for lotto\\n        Status lotteryStatus; // Status for lotto\\n        uint16[] prizeDistributionPercents; // The distribution percents for prize money\\n        uint256 startBlock; // Block number for start of lotto\\n        uint256 ticketPrice;\\n        uint16 ticketsCount;\\n        uint16 ticketsSold;\\n        uint16[] winningNumbers; // The winning numbers\\n    }\\n    // Lottery ID's to info\\n    mapping(uint256 => LottoInfo) internal allLotteries_;\\n    // LotteryId to rendomNumber\\n    mapping(uint256 => uint256) public rendomNumbers;\\n\\n    //-------------------------------------------------------------------------\\n    // EVENTS\\n    //-------------------------------------------------------------------------\\n\\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\\n\\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\\n\\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\\n\\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\\n\\n    //-------------------------------------------------------------------------\\n    // MODIFIERS\\n    //-------------------------------------------------------------------------\\n\\n    modifier onlyRandomGenerator() {\\n        require(msg.sender == address(randomGenerator_), \\\"Only random generator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!address(msg.sender).isContract(), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 token_,\\n        address priceFeed_,\\n        IApePair pair_,\\n        IApeRouter02 router_,\\n        address burnReserve_,\\n        address liquidityReserve_,\\n        address treasury_\\n    ) {\\n        require(address(router_) != address(0), \\\"Lottery: Router can't be address zero\\\");\\n        require(address(token_) != address(0), \\\"Lottery: Pair can't be address zero\\\");\\n        require(treasury_ != address(0), \\\"Lottery: Treasury can't be address zero\\\");\\n        require(liquidityReserve_ != address(0), \\\"Lottery: LiquidityReserve can't be address zero\\\");\\n        require(burnReserve_ != address(0), \\\"Lottery: BurnReserve can't be address zero\\\");\\n        require(priceFeed_ != address(0), \\\"Lottery: PriceFeed can't be address zero\\\");\\n        require(address(pair_) != address(0), \\\"Lottery: Pair can't be address zero\\\");\\n        token = token_;\\n        priceFeed = AggregatorInterface(priceFeed_);\\n        pair = pair_;\\n        burnReserve = burnReserve_;\\n        liquidityReserve = liquidityReserve_;\\n        treasury = treasury_;\\n        router = router_;\\n    }\\n\\n    function getBasicLottoInfo(uint256 lotteryId_) public view returns (LottoInfo memory) {\\n        return (allLotteries_[lotteryId_]);\\n    }\\n\\n    function setRendomGenerator(address randomNumberGenerator_) external onlyOwner {\\n        require(randomNumberGenerator_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        randomGenerator_ = IRandomNumberGenerator(randomNumberGenerator_);\\n    }\\n\\n    function drawWinningNumbers(uint256 lotteryId_) external onlyOwner {\\n        // Checks that the all tickets are sold\\n        require(\\n            allLotteries_[lotteryId_].ticketsSold == allLotteries_[lotteryId_].ticketsCount,\\n            \\\"Lottery: Cannot set winning numbers during lottery\\\"\\n        ); \\n        // Checks lottery numbers have not already been drawn\\n        require(\\n            allLotteries_[lotteryId_].lotteryStatus == Status.Open ||\\n                allLotteries_[lotteryId_].lotteryStatus == Status.NotStarted,\\n            \\\"Lottery: State incorrect for draw\\\"\\n        );\\n        // Sets lottery status to closed\\n        allLotteries_[lotteryId_].lotteryStatus = Status.Closed;\\n        // Requests a random number from the generator\\n        requestId_ = randomGenerator_.getRandomNumber(lotteryId_);\\n        uint256 amount = (getTokenAmountForCurrentPrice(allLotteries_[lotteryId_].ticketPrice) *\\n            1e18 *\\n            allLotteries_[lotteryId_].ticketsCount) / 2;\\n        token.transfer(burnReserve, amount);\\n        swap(amount);\\n        // Emits that random number has been requested\\n        emit RequestNumbers(lotteryId_, requestId_);\\n    }\\n\\n    function numbersDrawn(\\n        uint256 lotteryId_,\\n        bytes32 _requestId,\\n        uint256 _randomNumber\\n    ) external onlyRandomGenerator {\\n        require(allLotteries_[lotteryId_].lotteryStatus == Status.Closed, \\\"Lottery: Draw numbers first\\\");\\n        rendomNumbers[lotteryId_] = _randomNumber;\\n        if (requestId_ == _requestId) {\\n            allLotteries_[lotteryId_].lotteryStatus = Status.Completed;\\n            // allLotteries_[lotteryId_].winningNumbers = _split(lotteryId_);\\n        }\\n        // TODO fix\\n        // emit LotteryClose( lotteryId_, nft_.getTotalSupply());\\n    }\\n    function getWiningNumbers(uint256 _lotteryId) external {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Draw numbers first\\\");\\n        allLotteries_[_lotteryId].winningNumbers = _split(_lotteryId);\\n    }\\n\\n    /**\\n     * @param   startBlock_ The block number for the beginning of the\\n     *          lottery.\\n     */\\n    function createNewLotto(\\n        uint16[] calldata prizeDistributionPercents_,\\n        uint256 startBlock_,\\n        uint256 ticketPrice_,\\n        uint16 ticketsCount_\\n    ) external onlyOwner returns (uint256 lotteryId) {\\n        require(ticketPrice_ > 0, \\\"Lottery: Ticket price can't be zero\\\");\\n        require(ticketsCount_ > 0, \\\"Lottery: Tickets count can't be zero\\\");\\n        require(startBlock_ >= block.number, \\\"Lottery: Too late\\\");\\n        uint256 sumOfPrizePercents;\\n        for (uint8 i; i <= 2; i++) {\\n            sumOfPrizePercents += prizeDistributionPercents_[i];\\n        }\\n        require(sumOfPrizePercents == 5000, \\\"Lottery: Incorrect percents for prize distribution\\\");\\n        // Incrementing lottery ID\\n        lotteryIdCounter_++;\\n        lotteryId = lotteryIdCounter_;\\n        uint16[] memory winningNumbers;\\n        Status lotteryStatus;\\n        if (startBlock_ == block.number) {\\n            lotteryStatus = Status.Open;\\n        } else {\\n            lotteryStatus = Status.NotStarted;\\n        }\\n        // Saving data in struct\\n        LottoInfo memory newLottery = LottoInfo(\\n            lotteryId,\\n            lotteryStatus,\\n            prizeDistributionPercents_,\\n            startBlock_,\\n            ticketPrice_,\\n            ticketsCount_,\\n            0,\\n            winningNumbers\\n        );\\n        allLotteries_[lotteryId] = newLottery;\\n        currentTicket[lotteryId] = 1;\\n        // TODO fix\\n        // emit LotteryOpen(\\n        //     lotteryId,\\n        //     nft_.getTotalSupply()\\n        // );\\n    }\\n\\n    function claimReward(uint256 lotteryId_) external notContract {\\n        // Checks the lottery winning numbers are available\\n        require(allLotteries_[lotteryId_].lotteryStatus == Status.Completed, \\\"Lottery: Winning Numbers not chosen yet\\\");\\n        require(getWonAmount(msg.sender, lotteryId_) > 0, \\\"Lottery: Nothing to claim\\\");\\n        require(!alreadyClaimed[msg.sender][lotteryId_], \\\"Lottery: User have already claimed his rewards\\\");\\n        alreadyClaimed[msg.sender][lotteryId_] = true;\\n        // Transfering the user their winnings\\n        uint256 amount = getWonAmount(msg.sender, lotteryId_);\\n        if(getWonAmount(msg.sender, lotteryId_) > token.balanceOf(address(this))){\\n            amount = token.balanceOf(address(this));\\n        }\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function getWonAmount(address user_, uint256 lotteryId_) public view returns (uint256 amount) {\\n        uint16[] memory matchingNumbers = new uint16[](3);\\n        uint16[] memory winningNumbers = new uint16[](3);\\n        winningNumbers = getBasicLottoInfo(lotteryId_).winningNumbers;\\n        matchingNumbers = getNumberOfMatching(usersTickets[user_][lotteryId_], winningNumbers);\\n        if (matchingNumbers[0] == 0) {\\n            return 0;\\n        }\\n        for (uint256 i; i <= 2; i++) {\\n            if (matchingNumbers[i] > 0) {\\n                for (uint256 j; j <= 2; j++) {\\n                    if ((allLotteries_[lotteryId_].winningNumbers)[j] == matchingNumbers[i]) {\\n                        amount +=\\n                            (allLotteries_[lotteryId_].prizeDistributionPercents[j] *\\n                                getTokenAmountForCurrentPrice(allLotteries_[lotteryId_].ticketPrice) *\\n                                1e18 *\\n                                allLotteries_[lotteryId_].ticketsCount) /\\n                            10000;\\n                    }\\n                }\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    function getNumberOfMatching(uint16[] memory usersNumbers_, uint16[] memory winningNumbers_)\\n        public\\n        pure\\n        returns (uint16[] memory wonNumbers)\\n    {\\n        wonNumbers = new uint16[](3);\\n        // Loops through all wimming numbers\\n        for (uint256 i = 0; i < winningNumbers_.length; i++) {\\n            // If the winning numbers and user numbers match\\n            for (uint256 j; j < usersNumbers_.length; j++) {\\n                if (usersNumbers_[j] == winningNumbers_[i]) {\\n                    // The number of matching numbers incrases\\n                    for (uint256 k; k < 3; k++) {\\n                        if (wonNumbers[k] == 0) {\\n                            wonNumbers[k] = usersNumbers_[j];\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _split(uint256 lotteryId_) internal returns (uint16[] memory) {\\n        uint16[] memory winningNumbers = new uint16[](3); \\n        uint256 i;\\n        // count of unique numbers we have already got\\n        uint256 numbersCount;\\n        while (numbersCount < 3) {\\n            // Encodes the random number with its position in loop\\n            bytes32 hashOfRandom = keccak256(abi.encodePacked(rendomNumbers[lotteryId_], i));\\n            // Casts random number hash into uint256\\n            uint256 numberRepresentation = uint256(hashOfRandom);\\n            if (uint16(numberRepresentation.mod(allLotteries_[lotteryId_].ticketsCount)) > 0) {\\n                uint256 duplicates;\\n                if (winningNumbers[0] == 0) {\\n                    winningNumbers[0] = uint16(numberRepresentation.mod(allLotteries_[lotteryId_].ticketsCount));\\n                    numbersCount++;\\n                }\\n                for (uint8 j; j < winningNumbers.length; j++) {\\n                    if (uint16(numberRepresentation.mod(allLotteries_[lotteryId_].ticketsCount)) == winningNumbers[j]) {\\n                        duplicates++;\\n                    }\\n                }\\n                if (duplicates == 0) {\\n                    winningNumbers[numbersCount] = uint16(\\n                        numberRepresentation.mod(allLotteries_[lotteryId_].ticketsCount)\\n                    );\\n                    numbersCount++;\\n                }\\n            }\\n            i++;\\n        }\\n        allLotteries_[lotteryId_].winningNumbers = winningNumbers;\\n        return winningNumbers;\\n    }\\n\\n    function buyTicket(uint256 lotteryId_) external {\\n        require(allLotteries_[lotteryId_].startBlock <= block.number, \\\"Lottery: Not started yet\\\");\\n        require(\\n            allLotteries_[lotteryId_].ticketsSold < allLotteries_[lotteryId_].ticketsCount,\\n            \\\"Lottery: No available tickets\\\"\\n        );\\n        usersTickets[msg.sender][lotteryId_].push(currentTicket[lotteryId_]);\\n        currentTicket[lotteryId_]++;\\n        allLotteries_[lotteryId_].ticketsSold++;\\n        token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            getTokenAmountForCurrentPrice(allLotteries_[lotteryId_].ticketPrice) * 1e18\\n        );\\n    }\\n\\n    function getTokenAmountForCurrentPrice(uint256 price_) public view returns (uint256) {\\n        uint256 bnbPrice = uint256(priceFeed.latestAnswer());\\n        uint256 tokenBalance = token.balanceOf(address(pair));\\n        uint256 bnbBalance = IERC20(WBNB).balanceOf(address(pair));\\n        uint256 tokenPrice = bnbPrice / (tokenBalance / bnbBalance);\\n        return (price_ * 1e8) / tokenPrice;\\n    }\\n\\n    function getUsersTickets(address user_, uint256 lotteryId_) public view returns (uint16[] memory) {\\n        return usersTickets[user_][lotteryId_];\\n    }\\n\\n    function swap(uint256 amount) public {\\n        uint256 amountForLiquidity = (amount * 6000) / 10000;\\n        address[] memory path = new address[](2);\\n\\n        path[0] = address(token);\\n        path[1] = WBNB;\\n        if (token.balanceOf(liquidityReserve) >= amountForLiquidity) {\\n            token.transferFrom(liquidityReserve, address(this), amountForLiquidity);\\n            token.approve(address(router), amountForLiquidity);\\n            router.swapExactTokensForETH(amountForLiquidity, 0, path, treasury, block.timestamp + 1000);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0f584f976775b62061ca89a0d635374dd897792dd55fc09a17273ef458a52c6\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\\n}\\n\",\"keccak256\":\"0x665dbbca64ac7762758f50953a32255efa24a6b8b4f63e68962b53959b40d8b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003064380380620030648339810160408190526200003491620003e7565b6200003f336200037e565b6001600160a01b038416620000a95760405162461bcd60e51b815260206004820152602560248201527f4c6f74746572793a20526f757465722063616e27742062652061646472657373604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6001600160a01b038716620000fc5760405162461bcd60e51b815260206004820152602360248201526000805160206200304483398151915260448201526265726f60e81b6064820152608401620000a0565b6001600160a01b038116620001645760405162461bcd60e51b815260206004820152602760248201527f4c6f74746572793a2054726561737572792063616e27742062652061646472656044820152667373207a65726f60c81b6064820152608401620000a0565b6001600160a01b038216620001d45760405162461bcd60e51b815260206004820152602f60248201527f4c6f74746572793a204c6971756964697479526573657276652063616e27742060448201526e62652061646472657373207a65726f60881b6064820152608401620000a0565b6001600160a01b0383166200023f5760405162461bcd60e51b815260206004820152602a60248201527f4c6f74746572793a204275726e526573657276652063616e27742062652061646044820152696472657373207a65726f60b01b6064820152608401620000a0565b6001600160a01b038616620002a85760405162461bcd60e51b815260206004820152602860248201527f4c6f74746572793a205072696365466565642063616e27742062652061646472604482015267657373207a65726f60c01b6064820152608401620000a0565b6001600160a01b038516620002fb5760405162461bcd60e51b815260206004820152602360248201526000805160206200304483398151915260448201526265726f60e81b6064820152608401620000a0565b600180546001600160a01b03199081166001600160a01b03998a1617909155600580548216978916979097179096556006805487169588169590951790945560088054861692871692909217909155600980548516918616919091179055600a805484169285169290921790915560078054909216921691909117905562000492565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620003e457600080fd5b50565b600080600080600080600060e0888a0312156200040357600080fd5b87516200041081620003ce565b60208901519097506200042381620003ce565b60408901519096506200043681620003ce565b60608901519095506200044981620003ce565b60808901519094506200045c81620003ce565b60a08901519093506200046f81620003ce565b60c08901519092506200048281620003ce565b8091505092959891949750929550565b612ba280620004a26000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063a324a3dd116100f9578063d310019c11610097578063e97fc16211610071578063e97fc162146103f9578063f2fde38b1461040c578063f887ea401461041f578063fc0c546a1461043257600080fd5b8063d310019c14610388578063d57f60d2146103c6578063da476755146103d957600080fd5b8063ae169a50116100d3578063ae169a501461033c578063b753bfe91461034f578063bb8440fd14610362578063bf16257a1461037557600080fd5b8063a324a3dd146102e5578063a8aa1b3114610309578063abbcee361461031c57600080fd5b806367dd74ca116101665780637c3fac26116101405780637c3fac261461029b5780637cbd1b3c146102ae5780638da5cb5b146102c157806394b918de146102d257600080fd5b806367dd74ca1461026d578063715018a614610280578063741bef1a1461028857600080fd5b806305f61786146101ae5780630c97fd45146101d457806336e4276a146101e95780633a0dca4c146101fc57806341ab01471461021c57806361d027b314610242575b600080fd5b6101c16101bc366004612469565b610445565b6040519081526020015b60405180910390f35b6101e76101e2366004612469565b6105f8565b005b6101e76101f7366004612469565b610906565b61020f61020a36600461249e565b6109a6565b6040516101cb91906124c8565b61022f61022a366004612510565b610a44565b60405161ffff90911681526020016101cb565b600a54610255906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6101e761027b366004612469565b610a98565b6101e7610c7b565b600554610255906001600160a01b031681565b6101e76102a9366004612543565b610cb1565b6101c16102bc366004612570565b610d53565b6000546001600160a01b0316610255565b6101e76102e0366004612469565b6110e5565b61022f6102f3366004612469565b600b6020526000908152604090205461ffff1681565b600654610255906001600160a01b031681565b6101c161032a366004612469565b600f6020526000908152604090205481565b6101e761034a366004612469565b6113a9565b600954610255906001600160a01b031681565b6101c161037036600461249e565b6116d1565b600854610255906001600160a01b031681565b6103b661039636600461249e565b600d60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101cb565b61020f6103d43660046126e3565b611987565b6103ec6103e7366004612469565b611abc565b6040516101cb919061279c565b6101e7610407366004612845565b611c8e565b6101e761041a366004612543565b611d90565b600754610255906001600160a01b031681565b600154610255906001600160a01b031681565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190612871565b6001546006546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190612871565b6006546040516370a0823160e01b81526001600160a01b03909116600482015290915060009073ae13d989dac2f0debff460ac112a837c89baa7cd906370a0823190602401602060405180830381865afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612871565b905060006105c982846128b6565b6105d390856128b6565b9050806105e4876305f5e1006128ca565b6105ee91906128b6565b9695505050505050565b6000546001600160a01b0316331461062b5760405162461bcd60e51b8152600401610622906128e9565b60405180910390fd5b6000818152600e602052604090206005015462010000810461ffff9081169116146106b35760405162461bcd60e51b815260206004820152603260248201527f4c6f74746572793a2043616e6e6f74207365742077696e6e696e67206e756d6260448201527165727320647572696e67206c6f747465727960701b6064820152608401610622565b60016000828152600e602052604090206001015460ff1660038111156106db576106db612747565b148061070a57506000818152600e602052604081206001015460ff16600381111561070857610708612747565b145b6107605760405162461bcd60e51b815260206004820152602160248201527f4c6f74746572793a20537461746520696e636f727265637420666f72206472616044820152607760f81b6064820152608401610622565b6000818152600e602052604090819020600101805460ff19166002908117909155549051632cdc85e960e21b8152600481018390526001600160a01b039091169063b37217a4906024016020604051808303816000875af11580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190612871565b6003556000818152600e60205260408120600581015460049091015460029161ffff169061081a90610445565b61082c90670de0b6b3a76400006128ca565b61083691906128ca565b61084091906128b6565b60015460085460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061291e565b506108c5816110e5565b6003546040805184815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a910160405180910390a15050565b60036000828152600e602052604090206001015460ff16600381111561092e5761092e612747565b146109705760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610622565b61097981611e28565b600e600083815260200190815260200160002060060190805190602001906109a29291906123ab565b5050565b6001600160a01b0382166000908152600c60209081526040808320848452825291829020805483518184028101840190945280845260609392830182828015610a3657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109fd5790505b505050505090505b92915050565b600c6020528260005260406000206020528160005260406000208181548110610a6c57600080fd5b906000526020600020906010918282040191900660020292509250509054906101000a900461ffff1681565b6000818152600e6020526040902060030154431015610af95760405162461bcd60e51b815260206004820152601860248201527f4c6f74746572793a204e6f7420737461727465642079657400000000000000006044820152606401610622565b6000818152600e602052604090206005015461ffff808216620100009092041610610b665760405162461bcd60e51b815260206004820152601d60248201527f4c6f74746572793a204e6f20617661696c61626c65207469636b6574730000006044820152606401610622565b336000908152600c602090815260408083208484528252808320600b8352908320805482546001810184559285529284206010830401805461ffff600f9094166002026101000a84810219909116948416029390931790925583835281541691610bcf83612940565b82546101009290920a61ffff8181021990931691831602179091556000838152600e60205260409020600501805462010000900490911691506002610c1383612940565b91906101000a81548161ffff021916908361ffff16021790555050610c783330610c52600e600086815260200190815260200160002060040154610445565b610c6490670de0b6b3a76400006128ca565b6001546001600160a01b031692919061205a565b50565b6000546001600160a01b03163314610ca55760405162461bcd60e51b8152600401610622906128e9565b610caf60006120c5565b565b6000546001600160a01b03163314610cdb5760405162461bcd60e51b8152600401610622906128e9565b6001600160a01b038116610d315760405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374732063616e6e6f74206265203020616464726573730000006044820152606401610622565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314610d7e5760405162461bcd60e51b8152600401610622906128e9565b60008311610dda5760405162461bcd60e51b815260206004820152602360248201527f4c6f74746572793a205469636b65742070726963652063616e2774206265207a60448201526265726f60e81b6064820152608401610622565b60008261ffff1611610e3a5760405162461bcd60e51b8152602060048201526024808201527f4c6f74746572793a205469636b65747320636f756e742063616e2774206265206044820152637a65726f60e01b6064820152608401610622565b43841015610e7e5760405162461bcd60e51b81526020600482015260116024820152704c6f74746572793a20546f6f206c61746560781b6044820152606401610622565b6000805b60028160ff1611610ed95787878260ff16818110610ea257610ea2612962565b9050602002016020810190610eb79190612978565b610ec59061ffff1683612993565b915080610ed1816129ab565b915050610e82565b508061138814610f465760405162461bcd60e51b815260206004820152603260248201527f4c6f74746572793a20496e636f72726563742070657263656e747320666f7220604482015271383934bd32903234b9ba3934b13aba34b7b760711b6064820152608401610622565b60048054906000610f56836129cb565b919050555060045491506060600043871415610f7457506001610f78565b5060005b6000604051806101000160405280868152602001836003811115610f9e57610f9e612747565b81526020018b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250505060208083018c905260408084018c905261ffff8b1660608501526080840183905260a0909301879052888252600e81529190208251815590820151600180830180549495508594909160ff199091169083600381111561103a5761103a612747565b02179055506040820151805161105a9160028401916020909101906123ab565b50606082015160038201556080820151600482015560a082015160058201805460c085015161ffff908116620100000263ffffffff1990921693169290921791909117905560e082015180516110ba9160068401916020909101906123ab565b5050506000858152600b60205260409020805461ffff19166001179055509298975050505050505050565b60006127106110f6836117706128ca565b61110091906128b6565b6040805160028082526060820183529293506000929091602083019080368337505060015482519293506001600160a01b03169183915060009061114657611146612962565b60200260200101906001600160a01b031690816001600160a01b03168152505073ae13d989dac2f0debff460ac112a837c89baa7cd8160018151811061118e5761118e612962565b6001600160a01b0392831660209182029290920101526001546009546040516370a0823160e01b81529083166004820152849291909116906370a0823190602401602060405180830381865afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190612871565b106113a4576001546009546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015611270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611294919061291e565b5060015460075460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af11580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061291e565b50600754600a546001600160a01b03918216916318cbafe591859160009186911661133b426103e8612993565b6040518663ffffffff1660e01b815260040161135b9594939291906129e6565b6000604051808303816000875af115801561137a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113a29190810190612a57565b505b505050565b333b156113ef5760405162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b6044820152606401610622565b33321461143e5760405162461bcd60e51b815260206004820152601a60248201527f70726f787920636f6e7472616374206e6f7420616c6c6f7765640000000000006044820152606401610622565b60036000828152600e602052604090206001015460ff16600381111561146657611466612747565b146114c35760405162461bcd60e51b815260206004820152602760248201527f4c6f74746572793a2057696e6e696e67204e756d62657273206e6f742063686f6044820152661cd95b881e595d60ca1b6064820152608401610622565b60006114cf33836116d1565b1161151c5760405162461bcd60e51b815260206004820152601960248201527f4c6f74746572793a204e6f7468696e6720746f20636c61696d000000000000006044820152606401610622565b336000908152600d6020908152604080832084845290915290205460ff161561159e5760405162461bcd60e51b815260206004820152602e60248201527f4c6f74746572793a2055736572206861766520616c726561647920636c61696d60448201526d656420686973207265776172647360901b6064820152608401610622565b336000818152600d602090815260408083208584529091528120805460ff19166001179055906115ce90836116d1565b6001546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa158015611617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163b9190612871565b61164533846116d1565b11156116ba576001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b79190612871565b90505b6001546109a2906001600160a01b03163383612115565b604080516003808252608082019092526000918291906020820160608036833750506040805160038082526080820190925292935060009291506020820160608036833701905050905061172484611abc565b60e001516001600160a01b0386166000908152600c6020908152604080832088845282529182902080548351818402810184019094528084529394506117c89390918301828280156117bd57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116117845790505b505050505082611987565b9150816000815181106117dd576117dd612962565b602002602001015161ffff16600014156117fc57600092505050610a3e565b60005b6002811161197e57600083828151811061181b5761181b612962565b602002602001015161ffff16111561196c5760005b6002811161196a5783828151811061184a5761184a612962565b602002602001015161ffff16600e6000888152602001908152602001600020600601828154811061187d5761187d612962565b60009182526020909120601082040154600f9091166002026101000a900461ffff161415611958576000868152600e6020526040902060058101546004909101546127109161ffff16906118d090610445565b6000898152600e602052604090206002018054859081106118f3576118f3612962565b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1661192591906128ca565b61193790670de0b6b3a76400006128ca565b61194191906128ca565b61194b91906128b6565b6119559086612993565b94505b80611962816129cb565b915050611830565b505b80611976816129cb565b9150506117ff565b50505092915050565b6040805160038082526080820190925260609160208201838036833701905050905060005b8251811015611ab55760005b8451811015611aa2578382815181106119d3576119d3612962565b602002602001015161ffff168582815181106119f1576119f1612962565b602002602001015161ffff161415611a905760005b6003811015611a8e57838181518110611a2157611a21612962565b602002602001015161ffff1660001415611a7c57858281518110611a4757611a47612962565b6020026020010151848281518110611a6157611a61612962565b602002602001019061ffff16908161ffff1681525050611a8e565b80611a86816129cb565b915050611a06565b505b80611a9a816129cb565b9150506119b8565b5080611aad816129cb565b9150506119ac565b5092915050565b604080516101008101825260008082526020820181905260609282018390528282018190526080820181905260a0820181905260c082015260e08101919091526000828152600e602090815260409182902082516101008101909352805483526001810154909183019060ff166003811115611b3a57611b3a612747565b6003811115611b4b57611b4b612747565b815260200160028201805480602002602001604051908101604052809291908181526020018280548015611bc657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b8d5790505b505050918352505060038201546020808301919091526004830154604080840191909152600584015461ffff80821660608601526201000090910416608084015260068401805482518185028101850190935280835260a0909401939192909190830182828015611c7e57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611c455790505b5050505050815250509050919050565b6002546001600160a01b03163314611ce05760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610622565b60026000848152600e602052604090206001015460ff166003811115611d0857611d08612747565b14611d555760405162461bcd60e51b815260206004820152601b60248201527f4c6f74746572793a2044726177206e756d6265727320666972737400000000006044820152606401610622565b6000838152600f602052604090208190556003548214156113a45750506000908152600e60205260409020600101805460ff19166003179055565b6000546001600160a01b03163314611dba5760405162461bcd60e51b8152600401610622906128e9565b6001600160a01b038116611e1f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610622565b610c78816120c5565b60408051600380825260808201909252606091600091906020820184803683370190505090506000805b600381101561202b576000858152600f602090815260408083205481518084019190915280820186905281518082038301815260609091018252805190830120888452600e90925282206005015490918291611eb390839061ffff16612145565b61ffff16111561201757600085600081518110611ed257611ed2612962565b602002602001015161ffff1660001415611f3b576000888152600e6020526040902060050154611f0790839061ffff16612145565b86600081518110611f1a57611f1a612962565b61ffff9092166020928302919091019091015283611f37816129cb565b9450505b60005b86518160ff161015611fbb57868160ff1681518110611f5f57611f5f612962565b60209081029190910181015160008b8152600e90925260409091206005015461ffff91821691611f9191869116612145565b61ffff161415611fa95781611fa5816129cb565b9250505b80611fb3816129ab565b915050611f3e565b5080612015576000888152600e6020526040902060050154611fe290839061ffff16612145565b868581518110611ff457611ff4612962565b61ffff9092166020928302919091019091015283612011816129cb565b9450505b505b83612021816129cb565b9450505050611e52565b6000858152600e602090815260409091208451612050926006909201918601906123ab565b5091949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113a29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612158565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526113a490849063a9059cbb60e01b9060640161208e565b60006121518284612add565b9392505050565b60006121ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661222a9092919063ffffffff16565b8051909150156113a457808060200190518101906121cb919061291e565b6113a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610622565b60606122398484600085612241565b949350505050565b6060824710156122a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610622565b6001600160a01b0385163b6122f95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610622565b600080866001600160a01b031685876040516123159190612b1d565b60006040518083038185875af1925050503d8060008114612352576040519150601f19603f3d011682016040523d82523d6000602084013e612357565b606091505b5091509150612367828286612372565b979650505050505050565b60608315612381575081612151565b8251156123915782518084602001fd5b8160405162461bcd60e51b81526004016106229190612b39565b82805482825590600052602060002090600f016010900481019282156124445791602002820160005b8382111561241457835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026123d4565b80156124425782816101000a81549061ffff0219169055600201602081600101049283019260010302612414565b505b50612450929150612454565b5090565b5b808211156124505760008155600101612455565b60006020828403121561247b57600080fd5b5035919050565b80356001600160a01b038116811461249957600080fd5b919050565b600080604083850312156124b157600080fd5b6124ba83612482565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561250457835161ffff16835292840192918401916001016124e4565b50909695505050505050565b60008060006060848603121561252557600080fd5b61252e84612482565b95602085013595506040909401359392505050565b60006020828403121561255557600080fd5b61215182612482565b803561ffff8116811461249957600080fd5b60008060008060006080868803121561258857600080fd5b853567ffffffffffffffff808211156125a057600080fd5b818801915088601f8301126125b457600080fd5b8135818111156125c357600080fd5b8960208260051b85010111156125d857600080fd5b602092830197509550508601359250604086013591506125fa6060870161255e565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561264557612645612606565b604052919050565b600067ffffffffffffffff82111561266757612667612606565b5060051b60200190565b600082601f83011261268257600080fd5b813560206126976126928361264d565b61261c565b82815260059290921b840181019181810190868411156126b657600080fd5b8286015b848110156126d8576126cb8161255e565b83529183019183016126ba565b509695505050505050565b600080604083850312156126f657600080fd5b823567ffffffffffffffff8082111561270e57600080fd5b61271a86838701612671565b9350602085013591508082111561273057600080fd5b5061273d85828601612671565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b8381101561279157815161ffff1687529582019590820190600101612771565b509495945050505050565b602081528151602082015260006020830151600481106127cc57634e487b7160e01b600052602160045260246000fd5b8060408401525060408301516101008060608501526127ef61012085018361275d565b915060608501516080850152608085015160a085015260a085015161281a60c086018261ffff169052565b5060c085015161ffff811660e08601525060e0850151848303601f1901828601526105ee838261275d565b60008060006060848603121561285a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561288357600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826128c5576128c561288a565b500490565b60008160001904831182151516156128e4576128e46128a0565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561293057600080fd5b8151801515811461215157600080fd5b600061ffff80831681811415612958576129586128a0565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561298a57600080fd5b6121518261255e565b600082198211156129a6576129a66128a0565b500190565b600060ff821660ff8114156129c2576129c26128a0565b60010192915050565b60006000198214156129df576129df6128a0565b5060010190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a365784516001600160a01b031683529383019391830191600101612a11565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215612a6a57600080fd5b825167ffffffffffffffff811115612a8157600080fd5b8301601f81018513612a9257600080fd5b8051612aa06126928261264d565b81815260059190911b82018301908381019087831115612abf57600080fd5b928401925b8284101561236757835182529284019290840190612ac4565b600082612aec57612aec61288a565b500690565b60005b83811015612b0c578181015183820152602001612af4565b838111156113a25750506000910152565b60008251612b2f818460208701612af1565b9190910192915050565b6020815260008251806020840152612b58816040850160208701612af1565b601f01601f1916919091016040019291505056fea26469706673582212208f740ac0b46869c1e72fdc3ced17fe67d94ba7f9bdbb5c411f1f002f1fdf827164736f6c634300080c00334c6f74746572793a20506169722063616e27742062652061646472657373207a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063a324a3dd116100f9578063d310019c11610097578063e97fc16211610071578063e97fc162146103f9578063f2fde38b1461040c578063f887ea401461041f578063fc0c546a1461043257600080fd5b8063d310019c14610388578063d57f60d2146103c6578063da476755146103d957600080fd5b8063ae169a50116100d3578063ae169a501461033c578063b753bfe91461034f578063bb8440fd14610362578063bf16257a1461037557600080fd5b8063a324a3dd146102e5578063a8aa1b3114610309578063abbcee361461031c57600080fd5b806367dd74ca116101665780637c3fac26116101405780637c3fac261461029b5780637cbd1b3c146102ae5780638da5cb5b146102c157806394b918de146102d257600080fd5b806367dd74ca1461026d578063715018a614610280578063741bef1a1461028857600080fd5b806305f61786146101ae5780630c97fd45146101d457806336e4276a146101e95780633a0dca4c146101fc57806341ab01471461021c57806361d027b314610242575b600080fd5b6101c16101bc366004612469565b610445565b6040519081526020015b60405180910390f35b6101e76101e2366004612469565b6105f8565b005b6101e76101f7366004612469565b610906565b61020f61020a36600461249e565b6109a6565b6040516101cb91906124c8565b61022f61022a366004612510565b610a44565b60405161ffff90911681526020016101cb565b600a54610255906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6101e761027b366004612469565b610a98565b6101e7610c7b565b600554610255906001600160a01b031681565b6101e76102a9366004612543565b610cb1565b6101c16102bc366004612570565b610d53565b6000546001600160a01b0316610255565b6101e76102e0366004612469565b6110e5565b61022f6102f3366004612469565b600b6020526000908152604090205461ffff1681565b600654610255906001600160a01b031681565b6101c161032a366004612469565b600f6020526000908152604090205481565b6101e761034a366004612469565b6113a9565b600954610255906001600160a01b031681565b6101c161037036600461249e565b6116d1565b600854610255906001600160a01b031681565b6103b661039636600461249e565b600d60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101cb565b61020f6103d43660046126e3565b611987565b6103ec6103e7366004612469565b611abc565b6040516101cb919061279c565b6101e7610407366004612845565b611c8e565b6101e761041a366004612543565b611d90565b600754610255906001600160a01b031681565b600154610255906001600160a01b031681565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190612871565b6001546006546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190612871565b6006546040516370a0823160e01b81526001600160a01b03909116600482015290915060009073ae13d989dac2f0debff460ac112a837c89baa7cd906370a0823190602401602060405180830381865afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612871565b905060006105c982846128b6565b6105d390856128b6565b9050806105e4876305f5e1006128ca565b6105ee91906128b6565b9695505050505050565b6000546001600160a01b0316331461062b5760405162461bcd60e51b8152600401610622906128e9565b60405180910390fd5b6000818152600e602052604090206005015462010000810461ffff9081169116146106b35760405162461bcd60e51b815260206004820152603260248201527f4c6f74746572793a2043616e6e6f74207365742077696e6e696e67206e756d6260448201527165727320647572696e67206c6f747465727960701b6064820152608401610622565b60016000828152600e602052604090206001015460ff1660038111156106db576106db612747565b148061070a57506000818152600e602052604081206001015460ff16600381111561070857610708612747565b145b6107605760405162461bcd60e51b815260206004820152602160248201527f4c6f74746572793a20537461746520696e636f727265637420666f72206472616044820152607760f81b6064820152608401610622565b6000818152600e602052604090819020600101805460ff19166002908117909155549051632cdc85e960e21b8152600481018390526001600160a01b039091169063b37217a4906024016020604051808303816000875af11580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190612871565b6003556000818152600e60205260408120600581015460049091015460029161ffff169061081a90610445565b61082c90670de0b6b3a76400006128ca565b61083691906128ca565b61084091906128b6565b60015460085460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061291e565b506108c5816110e5565b6003546040805184815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a910160405180910390a15050565b60036000828152600e602052604090206001015460ff16600381111561092e5761092e612747565b146109705760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610622565b61097981611e28565b600e600083815260200190815260200160002060060190805190602001906109a29291906123ab565b5050565b6001600160a01b0382166000908152600c60209081526040808320848452825291829020805483518184028101840190945280845260609392830182828015610a3657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109fd5790505b505050505090505b92915050565b600c6020528260005260406000206020528160005260406000208181548110610a6c57600080fd5b906000526020600020906010918282040191900660020292509250509054906101000a900461ffff1681565b6000818152600e6020526040902060030154431015610af95760405162461bcd60e51b815260206004820152601860248201527f4c6f74746572793a204e6f7420737461727465642079657400000000000000006044820152606401610622565b6000818152600e602052604090206005015461ffff808216620100009092041610610b665760405162461bcd60e51b815260206004820152601d60248201527f4c6f74746572793a204e6f20617661696c61626c65207469636b6574730000006044820152606401610622565b336000908152600c602090815260408083208484528252808320600b8352908320805482546001810184559285529284206010830401805461ffff600f9094166002026101000a84810219909116948416029390931790925583835281541691610bcf83612940565b82546101009290920a61ffff8181021990931691831602179091556000838152600e60205260409020600501805462010000900490911691506002610c1383612940565b91906101000a81548161ffff021916908361ffff16021790555050610c783330610c52600e600086815260200190815260200160002060040154610445565b610c6490670de0b6b3a76400006128ca565b6001546001600160a01b031692919061205a565b50565b6000546001600160a01b03163314610ca55760405162461bcd60e51b8152600401610622906128e9565b610caf60006120c5565b565b6000546001600160a01b03163314610cdb5760405162461bcd60e51b8152600401610622906128e9565b6001600160a01b038116610d315760405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374732063616e6e6f74206265203020616464726573730000006044820152606401610622565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314610d7e5760405162461bcd60e51b8152600401610622906128e9565b60008311610dda5760405162461bcd60e51b815260206004820152602360248201527f4c6f74746572793a205469636b65742070726963652063616e2774206265207a60448201526265726f60e81b6064820152608401610622565b60008261ffff1611610e3a5760405162461bcd60e51b8152602060048201526024808201527f4c6f74746572793a205469636b65747320636f756e742063616e2774206265206044820152637a65726f60e01b6064820152608401610622565b43841015610e7e5760405162461bcd60e51b81526020600482015260116024820152704c6f74746572793a20546f6f206c61746560781b6044820152606401610622565b6000805b60028160ff1611610ed95787878260ff16818110610ea257610ea2612962565b9050602002016020810190610eb79190612978565b610ec59061ffff1683612993565b915080610ed1816129ab565b915050610e82565b508061138814610f465760405162461bcd60e51b815260206004820152603260248201527f4c6f74746572793a20496e636f72726563742070657263656e747320666f7220604482015271383934bd32903234b9ba3934b13aba34b7b760711b6064820152608401610622565b60048054906000610f56836129cb565b919050555060045491506060600043871415610f7457506001610f78565b5060005b6000604051806101000160405280868152602001836003811115610f9e57610f9e612747565b81526020018b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250505060208083018c905260408084018c905261ffff8b1660608501526080840183905260a0909301879052888252600e81529190208251815590820151600180830180549495508594909160ff199091169083600381111561103a5761103a612747565b02179055506040820151805161105a9160028401916020909101906123ab565b50606082015160038201556080820151600482015560a082015160058201805460c085015161ffff908116620100000263ffffffff1990921693169290921791909117905560e082015180516110ba9160068401916020909101906123ab565b5050506000858152600b60205260409020805461ffff19166001179055509298975050505050505050565b60006127106110f6836117706128ca565b61110091906128b6565b6040805160028082526060820183529293506000929091602083019080368337505060015482519293506001600160a01b03169183915060009061114657611146612962565b60200260200101906001600160a01b031690816001600160a01b03168152505073ae13d989dac2f0debff460ac112a837c89baa7cd8160018151811061118e5761118e612962565b6001600160a01b0392831660209182029290920101526001546009546040516370a0823160e01b81529083166004820152849291909116906370a0823190602401602060405180830381865afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190612871565b106113a4576001546009546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015611270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611294919061291e565b5060015460075460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af11580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061291e565b50600754600a546001600160a01b03918216916318cbafe591859160009186911661133b426103e8612993565b6040518663ffffffff1660e01b815260040161135b9594939291906129e6565b6000604051808303816000875af115801561137a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113a29190810190612a57565b505b505050565b333b156113ef5760405162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b6044820152606401610622565b33321461143e5760405162461bcd60e51b815260206004820152601a60248201527f70726f787920636f6e7472616374206e6f7420616c6c6f7765640000000000006044820152606401610622565b60036000828152600e602052604090206001015460ff16600381111561146657611466612747565b146114c35760405162461bcd60e51b815260206004820152602760248201527f4c6f74746572793a2057696e6e696e67204e756d62657273206e6f742063686f6044820152661cd95b881e595d60ca1b6064820152608401610622565b60006114cf33836116d1565b1161151c5760405162461bcd60e51b815260206004820152601960248201527f4c6f74746572793a204e6f7468696e6720746f20636c61696d000000000000006044820152606401610622565b336000908152600d6020908152604080832084845290915290205460ff161561159e5760405162461bcd60e51b815260206004820152602e60248201527f4c6f74746572793a2055736572206861766520616c726561647920636c61696d60448201526d656420686973207265776172647360901b6064820152608401610622565b336000818152600d602090815260408083208584529091528120805460ff19166001179055906115ce90836116d1565b6001546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa158015611617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163b9190612871565b61164533846116d1565b11156116ba576001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b79190612871565b90505b6001546109a2906001600160a01b03163383612115565b604080516003808252608082019092526000918291906020820160608036833750506040805160038082526080820190925292935060009291506020820160608036833701905050905061172484611abc565b60e001516001600160a01b0386166000908152600c6020908152604080832088845282529182902080548351818402810184019094528084529394506117c89390918301828280156117bd57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116117845790505b505050505082611987565b9150816000815181106117dd576117dd612962565b602002602001015161ffff16600014156117fc57600092505050610a3e565b60005b6002811161197e57600083828151811061181b5761181b612962565b602002602001015161ffff16111561196c5760005b6002811161196a5783828151811061184a5761184a612962565b602002602001015161ffff16600e6000888152602001908152602001600020600601828154811061187d5761187d612962565b60009182526020909120601082040154600f9091166002026101000a900461ffff161415611958576000868152600e6020526040902060058101546004909101546127109161ffff16906118d090610445565b6000898152600e602052604090206002018054859081106118f3576118f3612962565b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1661192591906128ca565b61193790670de0b6b3a76400006128ca565b61194191906128ca565b61194b91906128b6565b6119559086612993565b94505b80611962816129cb565b915050611830565b505b80611976816129cb565b9150506117ff565b50505092915050565b6040805160038082526080820190925260609160208201838036833701905050905060005b8251811015611ab55760005b8451811015611aa2578382815181106119d3576119d3612962565b602002602001015161ffff168582815181106119f1576119f1612962565b602002602001015161ffff161415611a905760005b6003811015611a8e57838181518110611a2157611a21612962565b602002602001015161ffff1660001415611a7c57858281518110611a4757611a47612962565b6020026020010151848281518110611a6157611a61612962565b602002602001019061ffff16908161ffff1681525050611a8e565b80611a86816129cb565b915050611a06565b505b80611a9a816129cb565b9150506119b8565b5080611aad816129cb565b9150506119ac565b5092915050565b604080516101008101825260008082526020820181905260609282018390528282018190526080820181905260a0820181905260c082015260e08101919091526000828152600e602090815260409182902082516101008101909352805483526001810154909183019060ff166003811115611b3a57611b3a612747565b6003811115611b4b57611b4b612747565b815260200160028201805480602002602001604051908101604052809291908181526020018280548015611bc657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b8d5790505b505050918352505060038201546020808301919091526004830154604080840191909152600584015461ffff80821660608601526201000090910416608084015260068401805482518185028101850190935280835260a0909401939192909190830182828015611c7e57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611c455790505b5050505050815250509050919050565b6002546001600160a01b03163314611ce05760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610622565b60026000848152600e602052604090206001015460ff166003811115611d0857611d08612747565b14611d555760405162461bcd60e51b815260206004820152601b60248201527f4c6f74746572793a2044726177206e756d6265727320666972737400000000006044820152606401610622565b6000838152600f602052604090208190556003548214156113a45750506000908152600e60205260409020600101805460ff19166003179055565b6000546001600160a01b03163314611dba5760405162461bcd60e51b8152600401610622906128e9565b6001600160a01b038116611e1f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610622565b610c78816120c5565b60408051600380825260808201909252606091600091906020820184803683370190505090506000805b600381101561202b576000858152600f602090815260408083205481518084019190915280820186905281518082038301815260609091018252805190830120888452600e90925282206005015490918291611eb390839061ffff16612145565b61ffff16111561201757600085600081518110611ed257611ed2612962565b602002602001015161ffff1660001415611f3b576000888152600e6020526040902060050154611f0790839061ffff16612145565b86600081518110611f1a57611f1a612962565b61ffff9092166020928302919091019091015283611f37816129cb565b9450505b60005b86518160ff161015611fbb57868160ff1681518110611f5f57611f5f612962565b60209081029190910181015160008b8152600e90925260409091206005015461ffff91821691611f9191869116612145565b61ffff161415611fa95781611fa5816129cb565b9250505b80611fb3816129ab565b915050611f3e565b5080612015576000888152600e6020526040902060050154611fe290839061ffff16612145565b868581518110611ff457611ff4612962565b61ffff9092166020928302919091019091015283612011816129cb565b9450505b505b83612021816129cb565b9450505050611e52565b6000858152600e602090815260409091208451612050926006909201918601906123ab565b5091949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113a29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612158565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526113a490849063a9059cbb60e01b9060640161208e565b60006121518284612add565b9392505050565b60006121ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661222a9092919063ffffffff16565b8051909150156113a457808060200190518101906121cb919061291e565b6113a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610622565b60606122398484600085612241565b949350505050565b6060824710156122a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610622565b6001600160a01b0385163b6122f95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610622565b600080866001600160a01b031685876040516123159190612b1d565b60006040518083038185875af1925050503d8060008114612352576040519150601f19603f3d011682016040523d82523d6000602084013e612357565b606091505b5091509150612367828286612372565b979650505050505050565b60608315612381575081612151565b8251156123915782518084602001fd5b8160405162461bcd60e51b81526004016106229190612b39565b82805482825590600052602060002090600f016010900481019282156124445791602002820160005b8382111561241457835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026123d4565b80156124425782816101000a81549061ffff0219169055600201602081600101049283019260010302612414565b505b50612450929150612454565b5090565b5b808211156124505760008155600101612455565b60006020828403121561247b57600080fd5b5035919050565b80356001600160a01b038116811461249957600080fd5b919050565b600080604083850312156124b157600080fd5b6124ba83612482565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561250457835161ffff16835292840192918401916001016124e4565b50909695505050505050565b60008060006060848603121561252557600080fd5b61252e84612482565b95602085013595506040909401359392505050565b60006020828403121561255557600080fd5b61215182612482565b803561ffff8116811461249957600080fd5b60008060008060006080868803121561258857600080fd5b853567ffffffffffffffff808211156125a057600080fd5b818801915088601f8301126125b457600080fd5b8135818111156125c357600080fd5b8960208260051b85010111156125d857600080fd5b602092830197509550508601359250604086013591506125fa6060870161255e565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561264557612645612606565b604052919050565b600067ffffffffffffffff82111561266757612667612606565b5060051b60200190565b600082601f83011261268257600080fd5b813560206126976126928361264d565b61261c565b82815260059290921b840181019181810190868411156126b657600080fd5b8286015b848110156126d8576126cb8161255e565b83529183019183016126ba565b509695505050505050565b600080604083850312156126f657600080fd5b823567ffffffffffffffff8082111561270e57600080fd5b61271a86838701612671565b9350602085013591508082111561273057600080fd5b5061273d85828601612671565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b8381101561279157815161ffff1687529582019590820190600101612771565b509495945050505050565b602081528151602082015260006020830151600481106127cc57634e487b7160e01b600052602160045260246000fd5b8060408401525060408301516101008060608501526127ef61012085018361275d565b915060608501516080850152608085015160a085015260a085015161281a60c086018261ffff169052565b5060c085015161ffff811660e08601525060e0850151848303601f1901828601526105ee838261275d565b60008060006060848603121561285a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561288357600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826128c5576128c561288a565b500490565b60008160001904831182151516156128e4576128e46128a0565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561293057600080fd5b8151801515811461215157600080fd5b600061ffff80831681811415612958576129586128a0565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561298a57600080fd5b6121518261255e565b600082198211156129a6576129a66128a0565b500190565b600060ff821660ff8114156129c2576129c26128a0565b60010192915050565b60006000198214156129df576129df6128a0565b5060010190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a365784516001600160a01b031683529383019391830191600101612a11565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215612a6a57600080fd5b825167ffffffffffffffff811115612a8157600080fd5b8301601f81018513612a9257600080fd5b8051612aa06126928261264d565b81815260059190911b82018301908381019087831115612abf57600080fd5b928401925b8284101561236757835182529284019290840190612ac4565b600082612aec57612aec61288a565b500690565b60005b83811015612b0c578181015183820152602001612af4565b838111156113a25750506000910152565b60008251612b2f818460208701612af1565b9190910192915050565b6020815260008251806020840152612b58816040850160208701612af1565b601f01601f1916919091016040019291505056fea26469706673582212208f740ac0b46869c1e72fdc3ced17fe67d94ba7f9bdbb5c411f1f002f1fdf827164736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createNewLotto(uint16[],uint256,uint256,uint16)": {
        "params": {
          "startBlock_": "The block number for the beginning of the          lottery."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1748,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)230"
      },
      {
        "astId": 1751,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "randomGenerator_",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRandomNumberGenerator)3046"
      },
      {
        "astId": 1753,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestId_",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1755,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryIdCounter_",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1758,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorInterface)47"
      },
      {
        "astId": 1761,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "pair",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IApePair)1325"
      },
      {
        "astId": 1764,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IApeRouter02)1721"
      },
      {
        "astId": 1769,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "burnReserve",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1771,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "liquidityReserve",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1773,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "treasury",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1777,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "currentTicket",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 1784,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "usersTickets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint16)dyn_storage))"
      },
      {
        "astId": 1790,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "alreadyClaimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1820,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "allLotteries_",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(LottoInfo)1815_storage)"
      },
      {
        "astId": 1824,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "rendomNumbers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)47": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IApePair)1325": {
        "encoding": "inplace",
        "label": "contract IApePair",
        "numberOfBytes": "20"
      },
      "t_contract(IApeRouter02)1721": {
        "encoding": "inplace",
        "label": "contract IApeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)230": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomNumberGenerator)3046": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)1795": {
        "encoding": "inplace",
        "label": "enum Lottery.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint16)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint16[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint16)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LottoInfo)1815_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lottery.LottoInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LottoInfo)1815_storage"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LottoInfo)1815_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.LottoInfo",
        "members": [
          {
            "astId": 1797,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "lotteryID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1800,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "lotteryStatus",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Status)1795"
          },
          {
            "astId": 1803,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "prizeDistributionPercents",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 1805,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "startBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1807,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1809,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketsCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 1811,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketsSold",
            "offset": 2,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 1814,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "winningNumbers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint16)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}