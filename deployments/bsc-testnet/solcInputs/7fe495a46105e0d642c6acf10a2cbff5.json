{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IRandomNumberGenerator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRandomNumberGenerator {\n    /**\n     * Requests randomness from a user-provided seed\n     */\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\n}\n"
    },
    "contracts/SweetpadLottery.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n// Imported OZ helper contracts\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n// import \"@openzeppelin/contracts/proxy/Initializable.sol\";\n// Inherited allowing for ownership of contract\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n// Allows for intergration with ChainLink VRF\nimport \"./interfaces/IRandomNumberGenerator.sol\";\n// Interface for Lottery NFT to mint tokens\nimport \"./interfaces/ISweetpadTicket.sol\";\n\n\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\n// import \"./Testable.sol\";\n\ncontract SweetpadLottery is Ownable {\n    // Libraries\n    using SafeMath for uint256;\n    // Safe ERC20\n    using SafeERC20 for IERC20;\n    // Address functionality\n    using Address for address;\n\n    // State variables\n    // Instance of Cake token (collateral currency for lotto)\n    // IERC20 internal cake_;\n    // Storing of the NFT\n    // TODO check\n    // ISweetpadTicket internal nft_;\n    // Storing of the randomness generator\n    IRandomNumberGenerator internal randomGenerator_;\n    // Request ID for random number\n    bytes32 internal requestId_;\n    // Counter for lottery IDs\n    uint256 private lotteryIdCounter_;\n\n    // Lottery size\n    uint16 public sizeOfLottery_;\n    // Max range for numbers (starting at 0)\n    uint16 public maxValidRange_;\n\n    // Represents the status of the lottery\n    enum Status {\n        NotStarted, // The lottery has not started yet\n        Open, // The lottery is open for ticket purchases\n        Closed, // The lottery is no longer open for ticket purchases\n        Completed // The lottery has been closed and the numbers drawn\n    }\n    // All the needed info around a lottery\n    struct LottoInfo {\n        uint256 lotteryID; // ID for lotto\n        Status lotteryStatus; // Status for lotto\n        address ido;\n        // uint256 prizePoolInCake;    // The amount of cake for prize money\n        // uint256 costPerTicket;      // Cost per ticket in $cake\n        // uint8[] prizeDistribution;  // The distribution for prize money\n        uint256 startingTimestamp; // Block timestamp for star of lotto\n        uint256 closingTimestamp; // Block timestamp for end of entries\n        uint16[] winningNumbers; // The winning numbers\n    }\n    // Lottery ID's to info\n    mapping(uint256 => LottoInfo) internal allLotteries_;\n    mapping(uint256 => uint256) public rendomNumbers;\n    mapping(address => uint256) public idoToId;\n\n    //-------------------------------------------------------------------------\n    // EVENTS\n    //-------------------------------------------------------------------------\n\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\n\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\n\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\n\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\n\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\n\n    //-------------------------------------------------------------------------\n    // MODIFIERS\n    //-------------------------------------------------------------------------\n\n    modifier onlyRandomGenerator() {\n        require(msg.sender == address(randomGenerator_), \"Only random generator\");\n        _;\n    }\n\n    modifier notContract() {\n        require(!address(msg.sender).isContract(), \"contract not allowed\");\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    // CONSTRUCTOR\n    //-------------------------------------------------------------------------\n\n    constructor(\n        // address _cake,\n        // address _timer,\n        uint8 _sizeOfLotteryNumbers,\n        uint16 _maxValidNumberRange // uint8 _bucketOneMaxNumber, // TODO check // address lotteryNFT_ // Testable(_timer)\n    ) {\n        // require(\n        //     _discountForBucketOne < _discountForBucketTwo &&\n        //     _discountForBucketTwo < _discountForBucketThree,\n        //     \"Discounts must increase\"\n        // );\n        // require(\n        //     _cake != address(0),\n        //     \"Contracts cannot be 0 address\"\n        // );\n        require(_sizeOfLotteryNumbers != 0 && _maxValidNumberRange != 0, \"Lottery setup cannot be 0\");\n        // require(lotteryNFT_ != address(0), \"Contracts cannot be 0 address\");\n        // nft_ = ISweetpadTicket(lotteryNFT_);\n        // cake_ = IERC20(_cake);\n        sizeOfLottery_ = _sizeOfLotteryNumbers;\n        maxValidRange_ = _maxValidNumberRange;\n\n        // bucketOneMax_ = _bucketOneMaxNumber;\n        // bucketTwoMax_ = _bucketTwoMaxNumber;\n        // discountForBucketOne_ = _discountForBucketOne;\n        // discountForBucketTwo_ = _discountForBucketTwo;\n        // discountForBucketThree_ = _discountForBucketThree;\n    }\n\n    // function initialize(\n    //     address _lotteryNFT,\n    //     address _IRandomNumberGenerator\n    // )\n    //     external\n    //     initializer\n    //     onlyOwner()\n    // {\n    //     require(\n    //         _lotteryNFT != address(0) &&\n    //         _IRandomNumberGenerator != address(0),\n    //         \"Contracts cannot be 0 address\"\n    //     );\n    //     nft_ = ILotteryNFT(_lotteryNFT);\n    //     randomGenerator_ = IRandomNumberGenerator(_IRandomNumberGenerator);\n    // }\n\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\n        return (allLotteries_[_lotteryId]);\n    }\n\n    function getMaxRange() external view returns (uint16) {\n        return maxValidRange_;\n    }\n\n    //-------------------------------------------------------------------------\n    // STATE MODIFYING FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    //-------------------------------------------------------------------------\n    // Restricted Access Functions (onlyOwner)\n\n    function setRendomGenerator(address randomNumberGenerator_) external onlyOwner {\n        require(randomNumberGenerator_ != address(0), \"Contracts cannot be 0 address\");\n        randomGenerator_ = IRandomNumberGenerator(randomNumberGenerator_);\n    }\n\n    function updateSizeOfLottery(uint16 _newSize) external onlyOwner {\n        require(sizeOfLottery_ != _newSize, \"Cannot set to current size\");\n        require(sizeOfLottery_ != 0, \"Lottery size cannot be 0\");\n        sizeOfLottery_ = _newSize;\n\n        emit UpdatedSizeOfLottery(msg.sender, _newSize);\n    }\n\n    function updateMaxRange(uint16 _newMaxRange) external onlyOwner {\n        require(maxValidRange_ != _newMaxRange, \"Cannot set to current size\");\n        require(maxValidRange_ != 0, \"Max range cannot be 0\");\n        maxValidRange_ = _newMaxRange;\n\n        emit UpdatedMaxRange(msg.sender, _newMaxRange);\n    }\n\n    function drawWinningNumbers(uint256 _lotteryId) external onlyOwner {\n        // Checks that the lottery is past the closing block\n        require(\n            allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\n            \"Cannot set winning numbers during lottery\"\n        );\n        // Checks lottery numbers have not already been drawn\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Open || allLotteries_[_lotteryId].lotteryStatus == Status.NotStarted, \"Lottery State incorrect for draw\");\n        // Sets lottery status to closed\n        allLotteries_[_lotteryId].lotteryStatus = Status.Closed;\n        // Requests a random number from the generator\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\n        // Emits that random number has been requested\n        emit RequestNumbers(_lotteryId, requestId_);\n    }\n\n    function numbersDrawn(\n        uint256 _lotteryId,\n        bytes32 _requestId,\n        uint256 _randomNumber\n    ) external onlyRandomGenerator {\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Closed, \"Draw numbers first\");\n        if (requestId_ == _requestId) {\n            allLotteries_[_lotteryId].lotteryStatus = Status.Completed;\n            // allLotteries_[_lotteryId].winningNumbers = _split(_randomNumber); // TODO\n        }\n        rendomNumbers[_lotteryId] = _randomNumber;\n        // TODO fix\n        // emit LotteryClose(_lotteryId, nft_.getTotalSupply());\n    }\n\n    function getWiningNumbers(uint256 _lotteryId) external {\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \"Draw numbers first\");\n        allLotteries_[_lotteryId].winningNumbers = _split(rendomNumbers[_lotteryId]);\n    }\n\n    // * @param   _prizeDistribution An array defining the distribution of the\n    //  *          prize pool. I.e if a lotto has 5 numbers, the distribution could\n    //  *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\n    //  *          right you get 5% of the pool, 2 matching would be 10% and so on.\n    //  * @param   _prizePoolInCake The amount of Cake available to win in this\n    //  *          lottery.\n\n    /**\n     * @param   _startingTimestamp The block timestamp for the beginning of the\n     *          lottery.\n     * @param   _closingTimestamp The block timestamp after which no more tickets\n     *          will be sold for the lottery. Note that this timestamp MUST\n     *          be after the starting block timestamp.\n     */\n    //  TODO add functionaliti to connect lottery and ido\n    function createNewLotto(\n        // uint8[] calldata _prizeDistribution,\n        // uint256 _prizePoolInCake,\n        // uint256 _costPerTicket,\n        uint256 _startingTimestamp,\n        uint256 _closingTimestamp,\n        address _ido\n    ) external onlyOwner returns (uint256 lotteryId) {\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \"Timestamps for lottery invalid\");\n        require(idoToId[_ido] == 0, \"SweetpadLottery: Lottery for current IDO contract was already created\");\n        // Incrementing lottery ID\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\n        lotteryId = lotteryIdCounter_;\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\n        Status lotteryStatus;\n        if (_startingTimestamp >= block.timestamp) {\n            lotteryStatus = Status.Open;\n        } else {\n            lotteryStatus = Status.NotStarted;\n        }\n        // Saving data in struct\n        LottoInfo memory newLottery = LottoInfo(\n            lotteryId,\n            lotteryStatus,\n            _ido,\n            // _prizePoolInCake,\n            // _costPerTicket,\n            // _prizeDistribution,\n            _startingTimestamp,\n            _closingTimestamp,\n            winningNumbers\n        );\n        allLotteries_[lotteryId] = newLottery;\n        idoToId[_ido] = lotteryId;\n        // TODO fix\n        // Emitting important information around new lottery.\n        // emit LotteryOpen(\n        //     lotteryId,\n        //     nft_.getTotalSupply()\n        // );\n    }\n\n    //-------------------------------------------------------------------------\n    // General Access Functions\n\n    // claim reward don't remove!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\n    //     // Checking the lottery is in a valid time for claiming\n    //     require(\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\n    //         \"Wait till end to claim\"\n    //     );\n    //     // Checks the lottery winning numbers are available\n    //     require(\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\n    //         \"Winning Numbers not chosen yet\"\n    //     );\n    //     require(\n    //         nft_.getOwnerOfTicket(_tokenId) == msg.sender,\n    //         \"Only the owner can claim\"\n    //     );\n    //     // Sets the claim of the ticket to true (if claimed, will revert)\n    //     require(\n    //         nft_.claimTicket(_tokenId, _lotteryId),\n    //         \"Numbers for ticket invalid\"\n    //     );\n    //     // Getting the number of matching tickets\n    //     uint8 matchingNumbers = _getNumberOfMatching(\n    //         nft_.getTicketNumbers(_tokenId),\n    //         allLotteries_[_lotteryId].winningNumbers\n    //     );\n    //     // Getting the prize amount for those matching tickets\n    //     uint256 prizeAmount = _prizeForMatching(\n    //         matchingNumbers,\n    //         _lotteryId\n    //     );\n    //     // Removing the prize amount from the pool\n    //     allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\n    //     // Transfering the user their winnings\n    //     cake_.safeTransfer(address(msg.sender), prizeAmount);\n    // }\n\n    //-------------------------------------------------------------------------\n    // INTERNAL FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    // TODO start tickets ids from 1 and check if user number is 0 breack\n    // TODO fix functionality\n    function getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\n        public\n        pure\n        returns (uint8 noOfMatching)\n    {\n        // Loops through all wimming numbers\n        for (uint256 i = 0; i < _winningNumbers.length; i++) {\n            // If the winning numbers and user numbers match\n            if (_usersNumbers[i] == _winningNumbers[i]) {\n                // The number of matching numbers incrases\n                noOfMatching += 1;\n            }\n        }\n    }\n\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\n        // Temparary storage for winning numbers\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\n        // Loops the size of the number of tickets in the lottery\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\n            // uint256 duplicated;\n            // Encodes the random number with its position in loop\n            bytes32 hashOfRandom = keccak256(abi.encodePacked(_randomNumber, i));\n            // Casts random number hash into uint256\n            uint256 numberRepresentation = uint256(hashOfRandom);\n            // Sets the winning number position to a uint16 of random hash number\n            // for (uint256 j = 0; j < winningNumbers.length; j++) {\n            //     if (winningNumbers[j] > 0) {\n            //         if (winningNumbers[j] == uint16(numberRepresentation.mod(maxValidRange_))) {\n            //             duplicated += 1;\n            //         }\n            //     }\n            // }\n            // if (duplicated > 0) {\n            //     continue;\n            // }\n            winningNumbers[i] = uint16(numberRepresentation.mod(maxValidRange_));\n        }\n        return winningNumbers;\n    }\n\n    function getOpenLotteries() public view returns (uint256[] memory openLotteries) {\n        for (uint256 i = 1; i <= lotteryIdCounter_; i++) {\n            if (allLotteries_[i].closingTimestamp > block.timestamp) {\n                openLotteries[i - 1] = allLotteries_[i].lotteryID;\n            }\n        }\n        return openLotteries;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/ISweetpadTicket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface ISweetpadTicket is IERC721, IERC721Metadata {\n    function totalTickets() external returns (uint256);\n\n    function mint(\n        address,\n        uint256,\n        address\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/SweetpadNFTFreezing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\nimport \"./interfaces/ISweetpadNFTFreezing.sol\";\nimport \"./interfaces/ISweetpadNFT.sol\";\nimport \"./interfaces/ISweetpadTicket.sol\";\n\nimport \"./SweetpadLottery.sol\";\n\n\ncontract SweetpadNFTFreezing is ISweetpadNFTFreezing, Ownable, ERC721Holder {\n    /// @notice Blocks per day for BSC\n    uint256 private constant BLOCKS_PER_DAY = 10; // TODO for mainnet change to 28674\n    uint256 private constant MIN_PERIOD = 182 * BLOCKS_PER_DAY;\n    uint256 private constant MAX_PERIOD = 1095 * BLOCKS_PER_DAY;\n\n    ISweetpadNFT public override nft;\n    ISweetpadTicket public override ticket;\n    SweetpadLottery public override lottery;\n\n    /// @notice NFT id -> frozen NFT data\n    mapping(uint256 => NFTData) public override nftData;\n    /// @notice user address -> NFT id's freezed by user\n    mapping(address => uint256[]) public userNFTs;\n    mapping(uint256 => uint256) public ticketsPerNFT;\n    mapping(address => mapping(address => uint256[])) public ticketsForIdo;\n\n    constructor(address _nft, address _ticket) {\n        setSweetpadNFT(_nft);\n        setSweetpadTicket(_ticket);\n    }\n\n    /**\n     * @notice Freeze Sweetpad NFT\n     * @param nftId: the id of the NFT\n     * @param freezePeriod: freezing period in blocks\n     */\n    function freeze(uint256 nftId, uint256 freezePeriod) external override {\n        uint256 ticketsToMint = freezePeriod == MAX_PERIOD\n            ? nft.getTicketsQuantityById(nftId) * 2\n            : nft.getTicketsQuantityById(nftId);\n\n        uint256 freezeEndBlock = _freeze(nftId, freezePeriod, ticketsToMint);\n\n        emit Froze(msg.sender, nftId, freezeEndBlock, ticketsToMint);\n\n        nft.safeTransferFrom(msg.sender, address(this), nftId);\n    }\n\n    /**\n     * @notice Freeze Sweetpad NFTs\n     * @param nftIds: the ids of the NFT\n     * @param freezePeriods: freezing periods in blocks\n     */\n    function freezeBatch(uint256[] calldata nftIds, uint256[] calldata freezePeriods) external override {\n        require(nftIds.length == freezePeriods.length, \"SweetpadNFTFreezing: Array lengths is not equal\");\n\n        uint256 len = nftIds.length;\n        uint256[] memory ticketsToMintBatch = new uint256[](len);\n        uint256[] memory freezeEndBlocks = new uint256[](len);\n        ticketsToMintBatch = nft.getTicketsQuantityByIds(nftIds);\n\n        for (uint256 i = 0; i < len; i++) {\n            if (freezePeriods[i] == MAX_PERIOD) {\n                ticketsToMintBatch[i] = ticketsToMintBatch[i] * 2;\n            }\n            freezeEndBlocks[i] = _freeze(nftIds[i], freezePeriods[i], ticketsToMintBatch[i]);\n        }\n        emit FrozeBatch(msg.sender, nftIds, freezeEndBlocks, ticketsToMintBatch);\n\n        nft.safeBatchTransferFrom(msg.sender, address(this), nftIds, \"0x00\");\n    }\n\n    function unfreeze(uint256 nftId) external override {\n        _unfreeze(nftId);\n\n        emit Unfroze(msg.sender, nftId);\n\n        nft.safeTransferFrom(address(this), msg.sender, nftId);\n    }\n\n    function unfreezeBatch(uint256[] calldata nftIds) external override {\n        for (uint256 i = 0; i < nftIds.length; i++) {\n            _unfreeze(nftIds[i]);\n        }\n\n        emit UnfrozeBatch(msg.sender, nftIds);\n\n        nft.safeBatchTransferFrom(address(this), msg.sender, nftIds, \"\");\n    }\n\n    function participate(address sweetpadIdo_) external {\n        require(userNFTs[msg.sender].length > 0, \"SweetpadIDO: User doesn't have NFTs staked\");\n        for (uint256 i; i < userNFTs[msg.sender].length; i++) {\n            ticket.mint(msg.sender, ticketsPerNFT[userNFTs[msg.sender][i]], sweetpadIdo_);\n        }\n    }\n\n    /**\n     * @notice Returns NFTs frozen by the user\n     */\n    function getNftsFrozeByUser(address user) external view override returns (uint256[] memory) {\n        return userNFTs[user];\n    }\n\n    function getTicketsForIdo(address user_, address ido_) external view override returns(uint256[] memory) {\n        return ticketsForIdo[user_][ido_];\n    }\n\n    function blocksPerDay() external pure override returns (uint256) {\n        return BLOCKS_PER_DAY;\n    }\n\n    function minFreezePeriod() external pure override returns (uint256) {\n        return MIN_PERIOD;\n    }\n\n    function maxFreezePeriod() external pure override returns (uint256) {\n        return MAX_PERIOD;\n    }\n\n    function setSweetpadNFT(address newNft) public override onlyOwner {\n        require(newNft != address(0), \"SweetpadNFTFreezing: NFT contract address can't be 0\");\n        nft = ISweetpadNFT(newNft);\n    }\n\n    function setSweetpadTicket(address newTicket) public override onlyOwner {\n        require(newTicket != address(0), \"SweetpadNFTFreezing: Ticket contract address can't be 0\");\n        ticket = ISweetpadTicket(newTicket);\n    }\n\n    function setSweetpadLottery(address lottery_) public override onlyOwner {\n        require(lottery_ != address(0), \"SweetpadNFTFreezing: Ticket contract address can't be 0\");\n        lottery = SweetpadLottery(lottery_);\n    }\n\n    // TODO add only lottery\n    // TODO add requiers\n    function addTickets(\n        address to_,\n        address ido_,\n        uint256 ticketId_\n    ) external override {\n        ticketsForIdo[to_][ido_].push(ticketId_);\n    }\n\n    function _freeze(\n        uint256 nftId,\n        uint256 freezePeriod,\n        uint256 ticketsToMint_\n    ) private returns (uint256 freezeEndBlock) {\n        require(freezePeriod >= MIN_PERIOD && freezePeriod <= MAX_PERIOD, \"SweetpadNFTFreezing: Wrong freeze period\");\n\n        freezeEndBlock = freezePeriod + block.number;\n\n        nftData[nftId] = NFTData({freezer: msg.sender, freezeEndBlock: freezeEndBlock});\n\n        userNFTs[msg.sender].push(nftId);\n\n        ticketsPerNFT[nftId] = ticketsToMint_;\n    }\n\n    function _unfreeze(uint256 nftId) private {\n        NFTData memory _nftData = nftData[nftId];\n        // slither-disable-next-line incorrect-equality\n        require(\n            checkAbilityToUnfreeze(msg.sender),\n            \"SweetpadNFTFreezing: You are participating in IDO that doesn't closed yet\"\n        );\n        require(_nftData.freezer == msg.sender, \"SweetpadNFTFreezing: Wrong unfreezer\");\n        require(_nftData.freezeEndBlock <= block.number, \"SweetpadNFTFreezing: Freeze period don't passed\");\n        // slither-disable-next-line costly-loop\n        delete nftData[nftId];\n\n        uint256[] memory _userNFTs = userNFTs[msg.sender];\n        uint256 len = _userNFTs.length;\n        for (uint256 i = 0; i < len; i++) {\n            if (_userNFTs[i] == nftId) {\n                if (i != len - 1) {\n                    userNFTs[msg.sender][i] = userNFTs[msg.sender][len - 1];\n                }\n                userNFTs[msg.sender].pop();\n\n                break;\n            }\n        }\n        delete ticketsPerNFT[nftId];\n    }\n\n    function checkAbilityToUnfreeze(address user_) internal view returns (bool) {\n        if ((lottery.getOpenLotteries()).length > 0) {\n            for (uint256 i; i < (lottery.getOpenLotteries()).length; i++) {\n                if (ticketsForIdo[user_][(lottery.getBasicLottoInfo((lottery.getOpenLotteries())[i])).ido].length > 0) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/interfaces/ISweetpadNFTFreezing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./ISweetpadNFT.sol\";\nimport \"./ISweetpadTicket.sol\";\nimport \"../SweetpadLottery.sol\";\n\ninterface ISweetpadNFTFreezing {\n    struct NFTData {\n        // Account that froze NFT\n        address freezer;\n        // block after which freezer can unfreeze NFT\n        uint256 freezeEndBlock;\n    }\n\n    function freeze(uint256, uint256) external;\n\n    function freezeBatch(uint256[] calldata, uint256[] calldata) external;\n\n    function unfreeze(uint256) external;\n\n    function unfreezeBatch(uint256[] calldata) external;\n\n    function blocksPerDay() external pure returns (uint256);\n\n    function minFreezePeriod() external pure returns (uint256);\n\n    function maxFreezePeriod() external pure returns (uint256);\n\n    function nft() external view returns (ISweetpadNFT);\n\n    function ticket() external view returns (ISweetpadTicket);\n\n    function lottery() external view returns (SweetpadLottery);\n\n    function nftData(uint256) external view returns (address, uint256);\n\n    function getNftsFrozeByUser(address) external view returns (uint256[] memory);\n    function getTicketsForIdo(address, address) external view returns(uint256[] memory);\n\n    function setSweetpadNFT(address) external;\n\n    function setSweetpadTicket(address) external;\n\n    function setSweetpadLottery(address) external;\n\n    // function tiketsForIdo(address, address) external returns(uint256[] memory);\n\n    function addTickets(\n        address,\n        address,\n        uint256\n    ) external;\n\n    event Froze(address indexed user, uint256 nftId, uint256 freezeEndBlock, uint256 ticketsMinted);\n\n    event FrozeBatch(address indexed user, uint256[] nftIds, uint256[] freezeEndBlocks, uint256[] ticketsMinted);\n\n    event Unfroze(address indexed user, uint256 nftId);\n\n    event UnfrozeBatch(address indexed user, uint256[] nftId);\n}\n"
    },
    "contracts/interfaces/ISweetpadNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface ISweetpadNFT is IERC721, IERC721Metadata {\n    enum Tier {\n        One,\n        Two,\n        Three\n    }\n\n    function idToTier(uint256) external view returns (Tier);\n\n    function tierToBoost(Tier) external view returns (uint256);\n\n    function getTicketsQuantityById(uint256) external view returns (uint256);\n\n    function getTicketsQuantityByIds(uint256[] calldata) external view returns (uint256[] calldata);\n\n    function getUserNfts(address) external view returns (uint256[] memory);\n\n    function setBaseURI(string memory) external;\n\n    function currentID() external view returns (uint256);\n\n    function safeMint(address, Tier) external;\n\n    function safeMintBatch(address, Tier[] memory) external;\n\n    function safeBatchTransferFrom(\n        address,\n        address,\n        uint256[] memory,\n        bytes memory\n    ) external;\n\n    /// @notice Emitted when new NFT is minted\n    event Create(uint256 indexed, Tier indexed, address indexed);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/SweetpadTicket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./interfaces/ISweetpadTicket.sol\";\nimport \"./interfaces/ISweetpadNFT.sol\";\nimport \"./interfaces/ISweetpadNFTFreezing.sol\";\n\n\ncontract SweetpadTicket is ISweetpadTicket, ERC721, Ownable {\n    uint256 public override totalTickets;\n    // TODO check if fe need this\n    ISweetpadNFT public sweetpadNFT;\n    ISweetpadNFTFreezing public nftFreezing;\n\n    uint256 private constant BLOCKS_PER_DAY = 10; // TODO for mainnet change to 28674\n    uint256 private constant MAX_PERIOD = 1095 * BLOCKS_PER_DAY;\n\n    mapping(address => uint256) public currentId;\n\n    struct NFTData {\n        // Account that froze NFT\n        address freezer;\n        // block after which freezer can unfreeze NFT\n        uint256 freezeEndBlock;\n        // Block number to freez\n        uint256 period;\n    }\n\n    constructor(ISweetpadNFT sweetpadNFT_) ERC721(\"Sweet Ticket\", \"SWTT\") {\n        sweetpadNFT = sweetpadNFT_;\n    }\n\n    function setNFTFreezing(ISweetpadNFTFreezing nftFreezing_) external onlyOwner {\n        nftFreezing = nftFreezing_;\n    }\n\n    function mint(\n        address to_,\n        uint256 amount_, \n        address sweetpadIdo_ \n    ) external override onlyOwner {\n        // TODO\n        for (uint256 i; i < amount_; i++) {\n            currentId[sweetpadIdo_]++;\n            _mint(to_, currentId[sweetpadIdo_]);\n            nftFreezing.addTickets(to_, sweetpadIdo_, currentId[sweetpadIdo_]);\n        }\n    }\n\n// TODO fix to revert safeTransferFrom too\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual override(ERC721, IERC721) {\n        revert(\"SweetpadTicket: can't transfer tickets\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/SweetpadIDO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./interfaces/ISweetpadTicket.sol\";\nimport \"./interfaces/ISweetpadFreezing.sol\";\nimport \"./interfaces/ISweetpadNFTFreezing.sol\";\n// TODO write Interfaces\nimport \"./SweetpadLottery.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract SweetpadIDO is AccessControl {\n    using SafeERC20 for IERC20;\n    ISweetpadTicket public sweetpadTicket;\n    ISweetpadFreezing public sweetpadFreezing;\n    ISweetpadNFTFreezing public sweetpadNFTFreezing;\n    SweetpadLottery public sweetpadLottery;\n    uint256 public percentForLottery;\n    uint256 public percentForGuaranteedAllocation;\n    uint256 public totalPower;\n    uint256 public commission;\n    uint256 public tokensToSell;\n    uint256 public availableTokensToSell;\n    uint256 public tokenPrice;\n    // amount of BUSD per ticket that user can buy tokens\n    uint256 public allocationPerTicket;\n    uint256 public idoSaleStart;\n    uint256 public idoSecondSaleStart;\n    uint256 public idoSaleEnd;\n    uint256 public idoSecondSaleEnd;\n    // TODO set correct address\n    IERC20 public BUSD = IERC20(0x6147Bc9c226748B47BFeA290f58CD0E5dC2E5D72);\n    IERC20 public asset;\n    // TODO add comment how to get value for role\n    bytes32 public constant CLIENT_ROLE = 0xa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232;\n    mapping(address => bool) public unlockedToSecondStage;\n    mapping(address => uint256) public tokensBoughtFirstStage;\n    mapping(address => uint256) public tokensBoughtSecondStage;\n    uint256 private powerForSecondStage;\n\n    constructor(\n        ISweetpadTicket sweetpadTicket_,\n        ISweetpadFreezing sweetpadFreezing_,\n        ISweetpadNFTFreezing sweetpadNFTFreezing_,\n        SweetpadLottery sweetpadLottery_,\n        IERC20 asset_,\n        address client_,\n        address admin_\n    ) {\n        sweetpadTicket = sweetpadTicket_;\n        sweetpadFreezing = sweetpadFreezing_;\n        sweetpadNFTFreezing = sweetpadNFTFreezing_;\n        sweetpadLottery = sweetpadLottery_;\n        asset = asset_;\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\n        _grantRole(CLIENT_ROLE, client_);\n    }\n\n    function setup(\n        uint256 lotteryPercent_,\n        uint256 guarantedPercent_,\n        uint256 totalPower_,\n        uint256 commission_,\n        uint256 tokensToSell_,\n        uint256 tokenPrice_,\n        uint256 allocationPerTicket_,\n        // block numbers to control ido sale start and end\n        uint256 idoSaleStart_,\n        uint256 idoSaleEnd_,\n        uint256 idoSecondSaleStart_,\n        uint256 idoSecondSaleEnd_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            lotteryPercent_ > 100 && lotteryPercent_ <= 1500,\n            \"SweetpadIDO: Trying to set incorrect percent for lottery allocation\"\n        );\n        require(\n            guarantedPercent_ >= 8500 && guarantedPercent_ <= 9900,\n            \"SweetpadIDO: Trying to set incorrect percent for guaranted allocation\"\n        );\n        require(guarantedPercent_ + lotteryPercent_ == 10000, \"SweetpadIDO: Incorrect percents\");\n        require(totalPower_ > 0, \"SweetpadIDO: TotalPower can't be zero\");\n        require(tokensToSell_ > 0, \"SweetpadIDO: TokensToSell can't be zero\");\n        require(tokenPrice_ > 0, \"SweetpadIDO: TokenPrice can't be zero\");\n        require(allocationPerTicket_ > 0, \"SweetpadIDO: Allocation per ticket can't be zero\");\n        require(idoSaleStart_ >= block.number, \"SweetpadIDO: Invalid block number\");\n        require(idoSaleEnd_ > idoSaleStart_, \"SweetpadIDO: IDO sale end block must be greater then start block\");\n        require(\n            idoSecondSaleStart_ > idoSaleEnd_,\n            \"SweetpadIDO: IDO second sale start block must be greater then first end block\"\n        );\n        require(\n            idoSecondSaleStart_ <= idoSecondSaleEnd_,\n            \"SweetpadIDO: IDO second sale end block must be greater then start block\"\n        );\n        percentForLottery = lotteryPercent_;\n        percentForGuaranteedAllocation = guarantedPercent_;\n        totalPower = totalPower_;\n        commission = commission_;\n        tokensToSell = tokensToSell_;\n        availableTokensToSell = tokensToSell_;\n        tokenPrice = tokenPrice_;\n        allocationPerTicket = allocationPerTicket_;\n\n        idoSaleStart = idoSaleStart_;\n        idoSaleEnd = idoSaleEnd_;\n        idoSecondSaleStart = idoSecondSaleStart_;\n        idoSecondSaleEnd = idoSecondSaleEnd_;\n    }\n\n    function buyFirstStage(uint256 amount_) external {\n        require(idoSaleStart <= block.number && idoSaleEnd > block.number, \"SweetpadIDO: Wrong period to buy\");\n        require(amount_ > 0, \"SweetpadIDO: Amount must be greater then zero\");\n        uint256 userPower = sweetpadFreezing.totalPower(msg.sender);\n        require(userPower > 0, \"SweetpadIDO: User's power can't be zero\");\n        // TODO write view function and use it\n        // TODO write view function to get availableTokenPrice and availabletokens count\n        uint256 availableTokens = (tokensToSell * 1e18 * percentForGuaranteedAllocation * userPower) /\n            10000 /\n            totalPower;\n        uint256 availableTokensPrice = (availableTokens * tokenPrice) /\n            10000 /\n            totalPower -\n            tokensBoughtFirstStage[msg.sender];\n        require(availableTokensPrice >= amount_, \"SweetpadIDO: Trying to buy more then available\");\n        // User pays for tokens\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\n        tokensBoughtFirstStage[msg.sender] += (amount_ * 1e18) / tokenPrice;\n        // User get assets\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\n        availableTokensToSell -= (amount_ * 1e18) / tokenPrice;\n\n        if (availableTokens - tokensBoughtFirstStage[msg.sender] == 0) {\n            unlockedToSecondStage[msg.sender] = true;\n            powerForSecondStage += userPower;\n        }\n    }\n\n    function buySecondStage(uint256 amount_) external {\n        require(\n            idoSecondSaleStart <= block.number && idoSecondSaleEnd > block.number,\n            \"SweetpadIDO: Wrong period to buy\"\n        );\n        require(amount_ > 0, \"SweetpadIDO: Amount must be greater then zero\");\n        uint256 userPower = sweetpadFreezing.totalPower(msg.sender);\n        require(userPower > 0, \"SweetpadIDO: User's power can't be zero\");\n        require(unlockedToSecondStage[msg.sender], \"SweetpadIDO: User can't buy tokens from second stage\");\n        uint256 availableTokensSecondStage = (availableTokensToSell * userPower) /\n            powerForSecondStage -\n            tokensBoughtSecondStage[msg.sender];\n        require(\n            availableTokensSecondStage >= tokensBoughtSecondStage[msg.sender],\n            \"SweetpadIDO: User already bought max amount of tokens\"\n        );\n        uint256 availableTokensPriceSecondStage = availableTokensSecondStage * tokenPrice;\n        require(availableTokensPriceSecondStage >= amount_, \"SweetpadIDO: Trying to buy more then available\");\n        // User pays for tokens\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\n        // User get assets\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\n        tokensBoughtSecondStage[msg.sender] += (amount_ * 1e18) / tokenPrice;\n        availableTokensToSell -= (amount_ * 1e18) / tokenPrice;\n    }\n\n    function buyFromWonTickets(uint256 amount_) external {\n        // uint256 numberOfTickets = getNumberOfWinningTickets(msg.sender);\n        uint256 allocation = getAllocationFromLottery(msg.sender);\n        require(allocation >= amount_, \"SweetpadIDO: Insufficient allocation\");\n        // User pays for tokens\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\n        // User get assets\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\n    }\n\n    function getWinningTicketsNumber() external view returns (uint256) {\n        return getNumberOfWinningTickets(msg.sender);\n    }\n\n    function getNumberOfWinningTickets(address user_) public view returns (uint256 numberOfWinningTickets) {\n        uint16[] memory winningNumbers = (sweetpadLottery.getBasicLottoInfo(sweetpadLottery.idoToId(address(this))))\n            .winningNumbers;\n        uint256[] memory tickets = sweetpadNFTFreezing.getTicketsForIdo(user_, address(this));\n        for (uint256 i; i < winningNumbers.length; i++) {\n            for (uint256 j; j < tickets.length; j++) {\n                if (tickets[j] == 0) {\n                    continue;\n                }\n                if (winningNumbers[i] == tickets[j]) {\n                    if (j != tickets.length - 1) {\n                        tickets[j] = tickets[tickets.length - 1];\n                    }\n                    tickets[tickets.length - 1] = 0;\n                    numberOfWinningTickets += 1;\n                }\n            }\n        }\n        return numberOfWinningTickets;\n    }\n\n    function getAllocationFromLottery(address user_) public view returns (uint256 allocation) {\n        uint256 numberOfTickets = getNumberOfWinningTickets(user_);\n        allocation = numberOfTickets * allocationPerTicket;\n        return allocation;\n    }\n}\n"
    },
    "contracts/interfaces/ISweetpadFreezing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\";\n\ninterface ISweetpadFreezing {\n    struct FreezeInfo {\n        uint256 frozenUntil; // blockNumber when can be unfrozen\n        uint256 period; // Number of blocks that tokens are frozen\n        uint256 frozenAmount; // Amount of tokens are frozen\n        uint256 power; // power of current frozen amount\n        uint8 asset; // Variable to identify if the token is SWT or LP\n    }\n\n    function freezeInfo(address, uint256)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint8\n        );\n\n    function sweetToken() external view returns (IERC20);\n\n    function lpToken() external view returns (IERC20);\n\n    function router() external view returns (IApeRouter02);\n\n    function multiplier() external view returns (uint256);\n\n    function totalFrozenSWT() external view returns (uint256);\n\n    function totalFrozenLP() external view returns (uint256);\n\n    function getBlocksPerDay() external pure returns (uint256);\n\n    function getMinFreezePeriod() external pure returns (uint256);\n\n    function getMaxFreezePeriod() external pure returns (uint256);\n\n    function totalPower(address) external view returns (uint256);\n\n    function freezeSWT(uint256, uint256) external;\n\n    function freezeLP(uint256, uint256) external;\n\n    function freezeWithBNB(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external payable;\n\n    function unfreezeSWT(uint256, uint256) external;\n\n    function unfreezeLP(uint256) external;\n\n    function setMultiplier(uint256) external;\n\n    function setLPToken(IERC20) external;\n\n    function getFreezes(address) external view returns (FreezeInfo[] memory);\n\n    function getPower(uint256, uint256) external pure returns (uint256);\n\n    /// @notice Emitted when tokens are frozen\n    event Freeze(uint256 id, address indexed account, uint256 amount, uint256 power, uint8 asset);\n    /// @notice Emitted when tokens are unFrozen\n    event UnFreeze(uint256 id, address indexed account, uint256 power, uint8 asset);\n    /// @notice Emmited when multiplier reseted\n    event MultiplierReseted(uint256 oldMultiplier, uint256 newMultiplier);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IApeRouter01.sol';\n\ninterface IApeRouter02 is IApeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IApeRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/SweetpadFreezing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/ISweetpadFreezing.sol\";\n\n/**\n * @title SweetpadFreezing\n * @dev Contract module which provides functionality to freeze assets on contract and get allocation.\n */\ncontract SweetpadFreezing is ISweetpadFreezing, Ownable {\n    using SafeERC20 for IERC20;\n\n    uint16 private constant DAYS_IN_YEAR = 100;\n\n    // TODO, we need to change BLOCKS_PER_DAY to a real one before deploying a mainnet\n    uint256 private constant BLOCKS_PER_DAY = 1;\n\n    // Min period counted with blocks that user can freeze assets\n    uint256 private constant MIN_FREEZE_PERIOD = 50 * BLOCKS_PER_DAY;\n\n    // Max period counted with blocks that user can freeze assets\n    uint256 private constant MAX_FREEZE_PERIOD = 300 * BLOCKS_PER_DAY;\n\n    // TODO set correct mainnet addresses before deploying\n    address public constant ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    /// @dev Multiplier to colculate power while freezing with LP\n    uint256 public override multiplier;\n\n    uint256 public override totalFrozenSWT;\n\n    uint256 public override totalFrozenLP;\n\n    /// @dev The data for each account\n    mapping(address => FreezeInfo[]) public override freezeInfo;\n\n    /// @dev The data for each account, returns totalPower\n    mapping(address => uint256) public override totalPower;\n\n    IERC20 public override sweetToken;\n    IERC20 public override lpToken;\n\n    IApeRouter02 public override router = IApeRouter02(ROUTER_ADDRESS);\n\n    /**\n     * @notice Initialize contract\n     */\n    constructor(IERC20 sweetToken_) {\n        require(address(sweetToken_) != address(0), \"SweetpadFreezing: Token address cant be Zero address\");\n        sweetToken = sweetToken_;\n    }\n\n    receive() external payable {\n        return;\n    }\n\n    fallback() external payable {\n        return;\n    }\n\n    /**\n     * @notice Freeze SWT tokens\n     * @param amount_ Amount of tokens to freeze\n     * @param period_ Period of freezing\n     */\n    function freezeSWT(uint256 amount_, uint256 period_) external override {\n        uint256 power = getPower(amount_, period_);\n        require(power >= 10000 ether, \"SweetpadFreezing: At least 10.000 xSWT is required\");\n        _freeze(msg.sender, amount_, period_, power, 0);\n        _transferAssetsToContract(msg.sender, amount_, 0);\n    }\n\n    /**\n     * @notice Freeze LP tokens\n     * @param amount_ Amount of tokens to freeze\n     * @param period_ Period of freezing\n     */\n    function freezeLP(uint256 amount_, uint256 period_) external override { \n        uint256 power = (getPower(amount_, period_) * multiplier) / 100;\n        require(power >= 10000 ether, \"SweetpadFreezing: At least 10.000 xSWT is required\");\n        _freeze(msg.sender, amount_, period_, power, 1);\n        _transferAssetsToContract(msg.sender, amount_, 1);\n    }\n\n    /**\n     * @notice Transfer BNB to contract and Freeze LP\n     * @param period_ Period of freezing\n     * @param amountOutMin The minimum amount of output tokens while swaping\n     * @param amountTokenMin Min token amount desiered while adding liquidity\n     * @param amountETHMin Min ETH amount desiered while adding liquidity\n     * @param deadline_ Timestamp after which the transaction will revert.\n     */\n    function freezeWithBNB(\n        uint256 period_,\n        uint256 amountOutMin,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        uint256 deadline_\n    ) external payable override {\n        // slither-disable-next-line reentrancy-events\n        uint256[] memory swapResult = _swapExactETHForSwtTokens(msg.value / 2, amountOutMin, deadline_);\n\n        uint256 tokenAmount = swapResult[1];\n\n        // slither-disable-next-line reentrancy-events\n        uint256 liquidity = _addLiquidityETH(\n            msg.sender,\n            msg.value / 2,\n            address(sweetToken),\n            tokenAmount,\n            amountTokenMin,\n            amountETHMin,\n            deadline_\n        );\n\n        uint256 power = (getPower(liquidity, period_) * multiplier) / 100;\n        require(power >= 10000 ether, \"SweetpadFreezing: At least 10.000 xSWT is required\");\n        _freeze(msg.sender, liquidity, period_, power, 1);\n    }\n\n    /**\n     * @notice Unfreeze SWT tokens\n     * @param id_ Id of freezing\n     * @param amount_ Amount of tokens to unfreeze\n     */\n    function unfreezeSWT(uint256 id_, uint256 amount_) external override {\n        FreezeInfo memory freezeData = freezeInfo[msg.sender][id_];\n        require(freezeData.asset == 0, \"SweetpadFreezing: Wrong ID\");\n        require(freezeData.frozenAmount != 0, \"SweetpadFreezing: Frozen amount is Zero\");\n        require(freezeData.frozenAmount >= amount_, \"SweetpadFreezing: Insufficient frozen amount\");\n        require(block.number >= freezeData.frozenUntil, \"SweetpadFreezing: Locked period dosn`t pass\");\n        uint256 expectedPower = getPower(freezeData.frozenAmount - amount_, freezeData.period);\n        require(\n            expectedPower >= 10000 ether || expectedPower == 0,\n            \"SweetpadFreezing: At least 10.000 xSWT is required\"\n        );\n        uint256 powerDelta = getPower(amount_, freezeData.period);\n        _unfreezeSWT(msg.sender, id_, amount_, powerDelta);\n    }\n\n    /**\n     * @notice Unfreeze LP tokens\n     * @param id_ Id of freezing\n     */\n    function unfreezeLP(uint256 id_) external override {\n        FreezeInfo memory freezeData = freezeInfo[msg.sender][id_];\n        require(freezeData.asset == 1, \"SweetpadFreezing: Wrong ID\");\n        require(block.number >= freezeData.frozenUntil, \"SweetpadFreezing: Locked period dosn`t pass\");\n        _unfreezeLP(msg.sender, id_);\n    }\n\n    /**\n     * @notice Set multiplier to calculate power while freezing with LP\n     * @param multiplier_ Shows how many times the power will be greater for  user while staking with LP\n     */\n    function setMultiplier(uint256 multiplier_) external override onlyOwner {\n        uint256 oldMultiplier = multiplier;\n        require(multiplier_ != 0, \"SweetpadFreezing: Multiplier can't be zero\");\n        multiplier = multiplier_;\n        emit MultiplierReseted(oldMultiplier, multiplier);\n    }\n\n    /**\n     * @notice Set LP token\n     * @param lpToken_ Address of BNB/SWT LP\n     */\n    function setLPToken(IERC20 lpToken_) external override onlyOwner {\n        require(address(lpToken_) != address(0), \"SweetpadFreezing: LP token address cant be Zero address\");\n        lpToken = lpToken_;\n    }\n\n    function getFreezes(address account_) external view override returns (FreezeInfo[] memory) {\n        return freezeInfo[account_];\n    }\n\n    function getBlocksPerDay() external pure override returns (uint256) {\n        return BLOCKS_PER_DAY;\n    }\n\n    function getMinFreezePeriod() external pure override returns (uint256) {\n        return MIN_FREEZE_PERIOD;\n    }\n\n    function getMaxFreezePeriod() external pure override returns (uint256) {\n        return MAX_FREEZE_PERIOD;\n    }\n\n    function getPower(uint256 amount_, uint256 period_) public pure override returns (uint256 power) {\n        require(MIN_FREEZE_PERIOD <= period_ && period_ <= MAX_FREEZE_PERIOD, \"SweetpadFreezing: Wrong period\");\n        if (period_ == MIN_FREEZE_PERIOD) {\n            power = amount_ / 2;\n            return power;\n        }\n\n        if (period_ > MIN_FREEZE_PERIOD && period_ <= DAYS_IN_YEAR * BLOCKS_PER_DAY) {\n            power = (period_ * amount_) / DAYS_IN_YEAR / BLOCKS_PER_DAY;\n            return power;\n        }\n\n        power = ((period_ + DAYS_IN_YEAR * BLOCKS_PER_DAY) * amount_) / (DAYS_IN_YEAR * 2) / BLOCKS_PER_DAY;\n        return power;\n    }\n\n    function _freeze(\n        address account_,\n        uint256 amount_,\n        uint256 period_,\n        uint256 power_,\n        uint8 asset_\n    ) private {\n        freezeInfo[account_].push(\n            FreezeInfo({\n                frozenUntil: block.number + period_,\n                period: period_,\n                frozenAmount: amount_,\n                power: power_,\n                asset: asset_\n            })\n        );\n        totalPower[account_] += power_;\n\n        if (asset_ == 0) {\n            totalFrozenSWT += amount_;\n        } else {\n            totalFrozenLP += amount_;\n        }\n\n        emit Freeze(freezeInfo[account_].length - 1, account_, amount_, power_, asset_);\n    }\n\n    function _transferAssetsToContract(\n        address from,\n        uint256 amount,\n        uint8 asset_\n    ) private {\n        IERC20 asset = sweetToken;\n        if (asset_ == 1) {\n            asset = lpToken;\n        }\n        asset.safeTransferFrom(from, address(this), amount);\n    }\n\n    function _unfreezeSWT(\n        address account_,\n        uint256 id_,\n        uint256 amount_,\n        uint256 power_\n    ) private {\n        if (amount_ == freezeInfo[account_][id_].frozenAmount) {\n            totalPower[account_] -= freezeInfo[account_][id_].power;\n            delete freezeInfo[account_][id_];\n        } else {\n            totalPower[account_] -= power_;\n            freezeInfo[account_][id_].frozenAmount -= amount_;\n            freezeInfo[account_][id_].power -= power_;\n        }\n\n        totalFrozenSWT -= amount_;\n\n        emit UnFreeze(id_, account_, amount_, 0);\n\n        sweetToken.safeTransfer(account_, amount_);\n    }\n\n    function _unfreezeLP(address account_, uint256 id_) private {\n        FreezeInfo memory freezeData = freezeInfo[account_][id_];\n        totalPower[account_] -= freezeData.power;\n        uint256 amount = freezeData.frozenAmount;\n        delete freezeInfo[account_][id_];\n        totalFrozenLP -= amount;\n\n        emit UnFreeze(id_, account_, amount, 1);\n\n        lpToken.safeTransfer(account_, amount);\n    }\n\n    function _transferBackUnusedAssets(\n        address to,\n        uint256 ethAmount,\n        uint256 tokenAmount,\n        uint256 ethAmountAdded,\n        uint256 tokenAmountAdded\n    ) private {\n        uint256 ethToTransfer = ethAmount - ethAmountAdded;\n        uint256 tokenToTransfer = tokenAmount - tokenAmountAdded;\n\n        if (ethToTransfer > 0) {\n            payable(to).transfer(ethToTransfer);\n        }\n\n        if (tokenToTransfer > 0) {\n            sweetToken.safeTransfer(to, tokenToTransfer);\n        }\n    }\n\n    function _addLiquidityETH(\n        address account,\n        uint256 ethAmount,\n        address token,\n        uint256 tokenAmount,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        uint256 deadline_\n    ) private returns (uint256) {\n        // slither-disable-next-line reentrancy-events\n        sweetToken.safeApprove(ROUTER_ADDRESS, tokenAmount);\n\n        (uint256 amountTokenAdded, uint256 amountETHAdded, uint256 liquidity) = router.addLiquidityETH{\n            value: ethAmount\n        }(token, tokenAmount, amountTokenMin, amountETHMin, address(this), deadline_);\n\n        _transferBackUnusedAssets(account, ethAmount, tokenAmount, amountETHAdded, amountTokenAdded);\n\n        sweetToken.safeApprove(ROUTER_ADDRESS, 0);\n\n        return liquidity;\n    }\n\n    function _swapExactETHForSwtTokens(\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 deadline_\n    ) private returns (uint256[] memory amounts) {\n        address[] memory path = new address[](2);\n\n        // slither-disable-next-line naming-convention\n        path[0] = router.WETH();\n        path[1] = address(sweetToken);\n\n        amounts = router.swapExactETHForTokens{value: amount}(amountOutMin, path, address(this), deadline_);\n        return amounts;\n    }\n}\n"
    },
    "contracts/Mocks/SweetpadLotteryMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n// Imported OZ helper contracts\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n// import \"@openzeppelin/contracts/proxy/Initializable.sol\";\n// Inherited allowing for ownership of contract\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n// Allows for intergration with ChainLink VRF\n// Interface for Lottery NFT to mint tokens\nimport \"../interfaces/ISweetpadTicket.sol\";\n\n\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\n// import \"./Testable.sol\";\n\ncontract SweetpadLotteryMock is Ownable {\n    // Libraries\n    using SafeMath for uint256;\n    // Safe ERC20\n    using SafeERC20 for IERC20;\n    // Address functionality\n    using Address for address;\n\n    // State variables\n    // Instance of Cake token (collateral currency for lotto)\n    // IERC20 internal cake_;\n    // Storing of the NFT\n    // TODO check\n    // ISweetpadTicket internal nft_;\n    // Storing of the randomness generator\n    // Request ID for random number\n    bytes32 internal requestId_;\n    // Counter for lottery IDs\n    uint256 private lotteryIdCounter_;\n\n    // Lottery size\n    uint16 public sizeOfLottery_;\n    // Max range for numbers (starting at 0)\n    uint16 public maxValidRange_;\n\n    // Represents the status of the lottery\n    enum Status {\n        NotStarted, // The lottery has not started yet\n        Open, // The lottery is open for ticket purchases\n        Closed, // The lottery is no longer open for ticket purchases\n        Completed // The lottery has been closed and the numbers drawn\n    }\n    // All the needed info around a lottery\n    struct LottoInfo {\n        uint256 lotteryID; // ID for lotto\n        Status lotteryStatus; // Status for lotto\n        address ido;\n        // uint256 prizePoolInCake;    // The amount of cake for prize money\n        // uint256 costPerTicket;      // Cost per ticket in $cake\n        // uint8[] prizeDistribution;  // The distribution for prize money\n        uint256 startingTimestamp; // Block timestamp for star of lotto\n        uint256 closingTimestamp; // Block timestamp for end of entries\n        uint16[] winningNumbers; // The winning numbers\n    }\n    // Lottery ID's to info\n    mapping(uint256 => LottoInfo) public allLotteries_;\n    mapping(uint256 => uint256) internal rendomNumbers;\n    mapping(address => uint256) public idoToId;\n\n    //-------------------------------------------------------------------------\n    // EVENTS\n    //-------------------------------------------------------------------------\n\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\n\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\n\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\n\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\n\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\n\n    //-------------------------------------------------------------------------\n    // MODIFIERS\n    //-------------------------------------------------------------------------\n\n    //-------------------------------------------------------------------------\n    // CONSTRUCTOR\n    //-------------------------------------------------------------------------\n\n    constructor(\n        // address _cake,\n        // address _timer,\n        uint8 _sizeOfLotteryNumbers,\n        uint16 _maxValidNumberRange // uint8 _bucketOneMaxNumber, // TODO check // address lotteryNFT_ // Testable(_timer)\n    ) {\n        // require(\n        //     _discountForBucketOne < _discountForBucketTwo &&\n        //     _discountForBucketTwo < _discountForBucketThree,\n        //     \"Discounts must increase\"\n        // );\n        // require(\n        //     _cake != address(0),\n        //     \"Contracts cannot be 0 address\"\n        // );\n        require(_sizeOfLotteryNumbers != 0 && _maxValidNumberRange != 0, \"Lottery setup cannot be 0\");\n        // require(lotteryNFT_ != address(0), \"Contracts cannot be 0 address\");\n        // nft_ = ISweetpadTicket(lotteryNFT_);\n        // cake_ = IERC20(_cake);\n        sizeOfLottery_ = _sizeOfLotteryNumbers;\n        maxValidRange_ = _maxValidNumberRange;\n\n        // bucketOneMax_ = _bucketOneMaxNumber;\n        // bucketTwoMax_ = _bucketTwoMaxNumber;\n        // discountForBucketOne_ = _discountForBucketOne;\n        // discountForBucketTwo_ = _discountForBucketTwo;\n        // discountForBucketThree_ = _discountForBucketThree;\n    }\n\n    // function initialize(\n    //     address _lotteryNFT,\n    //     address _IRandomNumberGenerator\n    // )\n    //     external\n    //     initializer\n    //     onlyOwner()\n    // {\n    //     require(\n    //         _lotteryNFT != address(0) &&\n    //         _IRandomNumberGenerator != address(0),\n    //         \"Contracts cannot be 0 address\"\n    //     );\n    //     nft_ = ILotteryNFT(_lotteryNFT);\n    //     randomGenerator_ = IRandomNumberGenerator(_IRandomNumberGenerator);\n    // }\n\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\n        return (allLotteries_[_lotteryId]);\n    }\n\n    function getMaxRange() external view returns (uint16) {\n        return maxValidRange_;\n    }\n\n    //-------------------------------------------------------------------------\n    // STATE MODIFYING FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    //-------------------------------------------------------------------------\n    // Restricted Access Functions (onlyOwner)\n\n    function updateSizeOfLottery(uint16 _newSize) external onlyOwner {\n        require(sizeOfLottery_ != _newSize, \"Cannot set to current size\");\n        require(sizeOfLottery_ != 0, \"Lottery size cannot be 0\");\n        sizeOfLottery_ = _newSize;\n\n        emit UpdatedSizeOfLottery(msg.sender, _newSize);\n    }\n\n    function updateMaxRange(uint16 _newMaxRange) external onlyOwner {\n        require(maxValidRange_ != _newMaxRange, \"Cannot set to current size\");\n        require(maxValidRange_ != 0, \"Max range cannot be 0\");\n        maxValidRange_ = _newMaxRange;\n\n        emit UpdatedMaxRange(msg.sender, _newMaxRange);\n    }\n\n    function getWiningNumbers(uint256 _lotteryId) external {\n        // require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \"Draw numbers first\");\n        allLotteries_[_lotteryId].winningNumbers = [1, 1, 1, 1, 5, 6, 7, 8, 9];\n\n    }\n\n    // * @param   _prizeDistribution An array defining the distribution of the\n    //  *          prize pool. I.e if a lotto has 5 numbers, the distribution could\n    //  *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\n    //  *          right you get 5% of the pool, 2 matching would be 10% and so on.\n    //  * @param   _prizePoolInCake The amount of Cake available to win in this\n    //  *          lottery.\n\n    /**\n     * @param   _startingTimestamp The block timestamp for the beginning of the\n     *          lottery.\n     * @param   _closingTimestamp The block timestamp after which no more tickets\n     *          will be sold for the lottery. Note that this timestamp MUST\n     *          be after the starting block timestamp.\n     */\n    //  TODO add functionaliti to connect lottery and ido\n    function createNewLotto(\n        // uint8[] calldata _prizeDistribution,\n        // uint256 _prizePoolInCake,\n        // uint256 _costPerTicket,\n        uint256 _startingTimestamp,\n        uint256 _closingTimestamp,\n        address _ido\n    ) external onlyOwner returns (uint256 lotteryId) {\n        // require(\n        //     _prizeDistribution.length == sizeOfLottery_,\n        //     \"Invalid distribution\"\n        // );\n        // uint256 prizeDistributionTotal = 0;\n        // for (uint256 j = 0; j < _prizeDistribution.length; j++) {\n        //     prizeDistributionTotal = prizeDistributionTotal.add(\n        //         uint256(_prizeDistribution[j])\n        //     );\n        // }\n        // Ensuring that prize distribution total is 100%\n        // require(\n        //     prizeDistributionTotal == 100,\n        //     \"Prize distribution is not 100%\"\n        // );\n        // require(\n        //     _prizePoolInCake != 0 && _costPerTicket != 0,\n        //     \"Prize or cost cannot be 0\"\n        // );\n        // require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \"Timestamps for lottery invalid\");\n        require(idoToId[_ido] == 0, \"SweetpadLottery: Lottery for current IDO contract was already created\");\n        // Incrementing lottery ID\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\n        lotteryId = lotteryIdCounter_;\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\n        Status lotteryStatus;\n        // if (_startingTimestamp >= block.timestamp) {\n        lotteryStatus = Status.Open;\n        // } else {\n        //     lotteryStatus = Status.NotStarted;\n        // }\n        // Saving data in struct\n        LottoInfo memory newLottery = LottoInfo(\n            lotteryId,\n            lotteryStatus,\n            _ido,\n            // _prizePoolInCake,\n            // _costPerTicket,\n            // _prizeDistribution,\n            _startingTimestamp,\n            _closingTimestamp,\n            winningNumbers\n        );\n        allLotteries_[lotteryId] = newLottery;\n        idoToId[_ido] = lotteryId;\n        // TODO fix\n        // Emitting important information around new lottery.\n        // emit LotteryOpen(\n        //     lotteryId,\n        //     nft_.getTotalSupply()\n        // );\n    }\n\n    //-------------------------------------------------------------------------\n    // General Access Functions\n\n    // claim reward don't remove!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\n    //     // Checking the lottery is in a valid time for claiming\n    //     require(\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\n    //         \"Wait till end to claim\"\n    //     );\n    //     // Checks the lottery winning numbers are available\n    //     require(\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\n    //         \"Winning Numbers not chosen yet\"\n    //     );\n    //     require(\n    //         nft_.getOwnerOfTicket(_tokenId) == msg.sender,\n    //         \"Only the owner can claim\"\n    //     );\n    //     // Sets the claim of the ticket to true (if claimed, will revert)\n    //     require(\n    //         nft_.claimTicket(_tokenId, _lotteryId),\n    //         \"Numbers for ticket invalid\"\n    //     );\n    //     // Getting the number of matching tickets\n    //     uint8 matchingNumbers = _getNumberOfMatching(\n    //         nft_.getTicketNumbers(_tokenId),\n    //         allLotteries_[_lotteryId].winningNumbers\n    //     );\n    //     // Getting the prize amount for those matching tickets\n    //     uint256 prizeAmount = _prizeForMatching(\n    //         matchingNumbers,\n    //         _lotteryId\n    //     );\n    //     // Removing the prize amount from the pool\n    //     allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\n    //     // Transfering the user their winnings\n    //     cake_.safeTransfer(address(msg.sender), prizeAmount);\n    // }\n\n    //-------------------------------------------------------------------------\n    // INTERNAL FUNCTIONS\n    //-------------------------------------------------------------------------\n\n    // TODO start tickets ids from 1 and check if user number is 0 breack\n    // TODO fix functionality\n    function getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\n        public\n        pure\n        returns (uint8 noOfMatching)\n    {\n        // Loops through all wimming numbers\n        for (uint256 i = 0; i < _winningNumbers.length; i++) {\n            // If the winning numbers and user numbers match\n            if (_usersNumbers[i] == _winningNumbers[i]) {\n                // The number of matching numbers incrases\n                noOfMatching += 1;\n            }\n        }\n    }\n\n    function _split() public view returns (uint16[] memory) {\n        // Temparary storage for winning numbers\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\n        // Loops the size of the number of tickets in the lottery\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\n        uint256 duplicated;\n            // Encodes the random number with its position in loop\n            bytes32 hashOfRandom = keccak256(\n                abi.encodePacked(\"0x8ba28b464185c48a3e1a05aec7116d926a90695d7360ceac9cc4b8e4369b52e5\", i)\n            );\n            // Casts random number hash into uint256\n            uint256 numberRepresentation = uint256(hashOfRandom);\n            // Sets the winning number position to a uint16 of random hash number\n            for (uint256 j = 0; j < winningNumbers.length; j++) {\n                if (winningNumbers[j] > 0) {\n                    if (winningNumbers[j] == uint16(numberRepresentation.mod(maxValidRange_))) {\n                        duplicated += 1;\n                    }\n                }\n            }\n            if(duplicated>0){\n                continue;\n            }\n            winningNumbers[i] = uint16(numberRepresentation.mod(maxValidRange_));\n        }\n        return winningNumbers;\n    }\n\n    function getOpenLotteries() public view returns (uint256[] memory openLotteries) {\n        for (uint256 i = 1; i <= lotteryIdCounter_; i++) {\n            if (allLotteries_[i].closingTimestamp > block.timestamp) {\n                openLotteries[i - 1] = allLotteries_[i].lotteryID;\n            }\n        }\n        return openLotteries;\n    }\n}\n"
    },
    "contracts/SweetpadNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n \nimport \"./interfaces/ISweetpadNFT.sol\";\n\n/**\n * @title SweetpadNFT\n * @dev Contract module which provides functionality to mint new ERC721 tokens\n *      Each token connected with image. The image saves on IPFS. Also each token belongs one of the Sweet tiers, and give\n *      some tickets for lottery.\n */\ncontract SweetpadNFT is ISweetpadNFT, ERC721, Ownable {\n    using Counters for Counters.Counter;\n\n    /// @dev ERC721 id, Indicates a specific token or token type\n    Counters.Counter private idCounter;\n\n    string private baseURI = \"ipfs://\";\n\n    /// @dev The data for each SweetpadNFT token\n    mapping(uint256 => Tier) public override idToTier;\n    mapping(Tier => uint256) public override tierToBoost;\n\n    /// @dev Array of user NFTs\n    mapping(address => uint256[]) public userNFTs;\n\n    /**\n     * @notice Initialize contract\n     */\n    constructor() ERC721(\"Sweet Dragon\", \"SWTD\") {\n        tierToBoost[Tier.One] = 5;\n        tierToBoost[Tier.Two] = 12;\n        tierToBoost[Tier.Three] = 30;\n    }\n\n    /*** External user-defined functions ***/\n    function setBaseURI(string memory baseURI_) external override onlyOwner {\n        baseURI = baseURI_;\n    }\n\n    function currentID() external view override returns (uint256) {\n        return idCounter.current();\n    }\n\n    /**\n     * @notice Function to get tickets quantity by tokens id.\n     * @param id_ Token id\n     * @return ticketsQuantity Tickets quantity\n     */\n    function getTicketsQuantityById(uint256 id_) external view override returns (uint256) {\n        return tierToBoost[idToTier[id_]];\n    }\n\n    /**\n     * @notice Function to get tickets quantity by tokens ids.\n     * @param ids_ Array of token ids\n     * @return ticketsQuantity Array of tickets quantity\n     */\n    function getTicketsQuantityByIds(uint256[] calldata ids_) external view override returns (uint256[] memory) {\n        uint256[] memory ticketsQuantity = new uint256[](ids_.length);\n        for (uint256 i = 0; i < ids_.length; i++) {\n            ticketsQuantity[i] = tierToBoost[idToTier[ids_[i]]];\n        }\n        return ticketsQuantity;\n    }\n\n    /**\n     * @notice Transfer token to another account\n     * @param to_ The address of the token receiver\n     * @param id_ token id\n     * @param data_ The _data argument MAY be re-purposed for the new context.\n     */\n    function safeTransfer(\n        address to_,\n        uint256 id_,\n        bytes memory data_\n    ) external {\n        _safeTransfer(msg.sender, to_, id_, data_);\n\n        popNFT(msg.sender, id_);\n        pushNFT(to_, id_);\n    }\n\n    /**\n     * @notice Transfer tokens to another account\n     * @param to_ The address of the tokens receiver\n     * @param ids_ Array of token ids\n     * @param data_ The _data argument MAY be re-purposed for the new context.\n     */\n    function safeBatchTransfer(\n        address to_,\n        uint256[] memory ids_,\n        bytes memory data_\n    ) external {\n        for (uint256 i = 0; i < ids_.length; i++) {\n            _safeTransfer(msg.sender, to_, ids_[i], data_);\n\n            popNFT(msg.sender, ids_[i]);\n            pushNFT(to_, ids_[i]);\n        }\n    }\n\n    /**\n     * @notice Transfer tokens from 'from' to 'to'\n     * @param from_ The address of the tokens owner\n     * @param to_ The address of the tokens receiver\n     * @param ids_ Array of token ids\n     * @param data_ The _data argument MAY be re-purposed for the new context.\n     */\n    function safeBatchTransferFrom(\n        address from_,\n        address to_,\n        uint256[] memory ids_,\n        bytes memory data_\n    ) external override {\n        for (uint256 i = 0; i < ids_.length; i++) {\n            safeTransferFrom(from_, to_, ids_[i], data_);\n\n            popNFT(from_, ids_[i]);\n            pushNFT(to_, ids_[i]);\n        }\n    }\n\n    /**\n     * @notice Mint new 721 standard token\n     * @param tier_ tier\n     */\n    function safeMint(address account_, Tier tier_) external override onlyOwner {\n        _mint(account_, tier_);\n    }\n\n    /**\n     * @notice Mint new ERC721 standard tokens in one transaction\n     * @param account_ The address of the owner of tokens\n     * @param tiers_ Array of tiers\n     */\n    function safeMintBatch(address account_, Tier[] memory tiers_) external override onlyOwner {\n        for (uint256 i = 0; i < tiers_.length; i++) {\n            _mint(account_, tiers_[i]);\n        }\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override(ERC721, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId;\n    }\n\n    function tokenURI(uint256 tokenId_) public view override(ERC721, IERC721Metadata) returns (string memory) {\n        return\n            _exists(tokenId_) ? string(abi.encodePacked(_baseURI(), Strings.toString(tokenId_), \".json\")) : _baseURI();\n    }\n\n    /**\n     * @notice Returns user NFTs\n     */\n    function getUserNfts(address user) external view override returns (uint256[] memory) {\n        return userNFTs[user];\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    /**\n     * @notice Mint new 721 standard token\n     * @param tier_ tier\n     */\n    function _mint(address account_, Tier tier_) private {\n        idCounter.increment();\n        uint256 id = idCounter.current();\n\n        _safeMint(account_, id);\n        idToTier[id] = tier_;\n\n        pushNFT(account_, id);\n\n        emit Create(id, tier_, account_);\n    }\n\n    function pushNFT(address user, uint256 nftId) internal {\n        userNFTs[user].push(nftId);\n    }\n\n    function popNFT(address user, uint256 nftId) internal {\n        uint256[] memory _userNFTs = userNFTs[user];\n        uint256 len = _userNFTs.length;\n\n        for (uint256 i = 0; i < len; i++) {\n            if (_userNFTs[i] == nftId) {\n                if (i != len - 1) {\n                    userNFTs[user][i] = userNFTs[user][len - 1];\n                }\n                userNFTs[user].pop();\n\n                break;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/SweetpadToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract SweetpadToken is ERC20 {\n    constructor() ERC20(\"Sweetpad Token\", \"SWT\") {\n        _mint(msg.sender, 1e8 * 1e18);\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/Mocks/AssetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract AssetMock is ERC20 {\n    constructor() ERC20(\"Asset\", \"AT\") {\n        _mint(msg.sender, 1e8 * 1e18);\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}